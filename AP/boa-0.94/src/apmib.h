/*
 *      Header file of AP mib
 *      Authors: David Hsu	<davidhsu@realtek.com.tw>
 *
 *      $Id: apmib.h,v 1.1.1.1 2005/03/09 04:52:51 rex Exp $
 *
 */


#ifndef INCLUDE_APMIB_H
#define INCLUDE_APMIB_H

#ifndef WIN32
#define __PACK__			__attribute__ ((packed))
#else
#define __PACK__
#endif
#if ((_RFCODE_ == 0) || (_RFCODE_ == 2))
	#define WLAN_IF                 "rai0"
	#define WLAN_STA_IF             "rai0"
	#define WLAN_APCLI_IF           "apclii0"
	#define WLAN_PREFIX             "rai"

	#define INIC_IF                 "ra0"
	#define INIC_STA_IF             "ra0"
	#define INIC_APCLI_IF           "apcli0"
	#define INIC_PREFIX T           "ra"

#elif (_RFCODE_ == 1)

	#define WLAN_IF                 "ra0"
	#define WLAN_STA_IF             "ra0"
	#define WLAN_APCLI_IF           "apcli0"
	#define WLAN_PREFIX             "ra"

	#define INIC_IF                 "rau0"
	#define INIC_STA_IF             "rau0"
	#define INIC_APCLI_IF           "apcliu0"
	#define INIC_PREFIX T           "rau"

#elif ((_RFCODE_ == 3) || (_RFCODE_ == 4))

	#define WLAN_IF                 "ra0"
	#define WLAN_STA_IF             "ra0"
	#define WLAN_APCLI_IF           "apcli0"
	#define WLAN_PREFIX             "ra"

	#define INIC_IF                 "rai0"
	#define INIC_STA_IF             "rai0"
	#define INIC_APCLI_IF           "apclii0"
	#define INIC_PREFIX T           "rai"

#else
        #error other not supported!

#endif

#ifdef _DNS_PROXY_
#define MAX_URL_LEN		150
#endif

#define APMIB_MIB_END	32768

#include "oemform.h"

// WLAN MIB id
typedef enum {
MIB_WLAN_SSID=1,
MIB_WLAN_CHAN_NUM,
MIB_WLAN_WEP,
MIB_WLAN_WEP64_KEY1,
MIB_WLAN_WEP64_KEY2,
MIB_WLAN_WEP64_KEY3,
MIB_WLAN_WEP64_KEY4,
MIB_WLAN_WEP128_KEY1,
MIB_WLAN_WEP128_KEY2,
MIB_WLAN_WEP128_KEY3,
MIB_WLAN_WEP128_KEY4,
MIB_WLAN_WEP_KEY_TYPE,
MIB_WLAN_WEP_DEFAULT_KEY,
MIB_WLAN_FRAG_THRESHOLD,
MIB_WLAN_SUPPORTED_RATE,
MIB_WLAN_BEACON_INTERVAL,
MIB_WLAN_PREAMBLE_TYPE,
MIB_WLAN_BASIC_RATE,
MIB_WLAN_RTS_THRESHOLD,
MIB_WLAN_AUTH_TYPE,
MIB_WLAN_HIDDEN_SSID,
MIB_WLAN_DISABLED,

// Rex add
MIB_WLAN_TX_POWER,
MIB_WLAN_WMM,
//kyle
MIB_WLAN_NOFORWARD,
MIB_WLAN_TURBO,
MIB_WLAN_N_FIX_RATE,
MIB_WLAN_N_CHANNEL_WIDTH,

//MIB_ALIAS_NAME,
MIB_ELAN_MAC_ADDR,
MIB_WLAN_MAC_ADDR,

#ifdef WLAN_WPA
MIB_WLAN_ENCRYPT,
MIB_WLAN_ENABLE_SUPP_NONWPA,
MIB_WLAN_SUPP_NONWPA,
MIB_WLAN_WPA_AUTH,
MIB_WLAN_WPA_CIPHER_SUITE,
MIB_WLAN_WPA_PSK,
MIB_WLAN_WPA_GROUP_REKEY_TIME,
MIB_WLAN_RS_IP,
MIB_WLAN_RS_PORT,
MIB_WLAN_RS_PASSWORD,
MIB_WLAN_ENABLE_1X,
MIB_WLAN_WPA_PSK_FORMAT,
#endif   //end    WLAN_WPA

MIB_WLAN_INACTIVITY_TIME,
MIB_WLAN_RATE_ADAPTIVE_ENABLED,

// access control MIB id
MIB_WLAN_AC_ENABLED,
MIB_WLAN_AC_NUM,
MIB_WLAN_AC_ADDR,
MIB_WLAN_AC_ADDR_ADD,
MIB_WLAN_AC_ADDR_DEL,
MIB_WLAN_AC_ADDR_DELALL,

#if defined(_MULTIPLE_WLAN_ACCESS_CONTROL_)
MIB_WLAN_AC2_ENABLED,
MIB_WLAN_AC2_NUM,
MIB_WLAN_AC2_ADDR,
MIB_WLAN_AC2_ADDR_ADD,
MIB_WLAN_AC2_ADDR_DEL,
MIB_WLAN_AC2_ADDR_DELALL,

MIB_WLAN_AC3_ENABLED,
MIB_WLAN_AC3_NUM,
MIB_WLAN_AC3_ADDR,
MIB_WLAN_AC3_ADDR_ADD,
MIB_WLAN_AC3_ADDR_DEL,
MIB_WLAN_AC3_ADDR_DELALL,

MIB_WLAN_AC4_ENABLED,
MIB_WLAN_AC4_NUM,
MIB_WLAN_AC4_ADDR,
MIB_WLAN_AC4_ADDR_ADD,
MIB_WLAN_AC4_ADDR_DEL,
MIB_WLAN_AC4_ADDR_DELALL,
#endif

// web access control MIB
MIB_SUPER_NAME,
MIB_SUPER_PASSWORD,
MIB_USER_NAME,
MIB_USER_PASSWORD,

MIB_DHCP_CLIENT_START,
MIB_DHCP_CLIENT_END,

#ifdef HOME_GATEWAY

MIB_WAN_MAC_ADDR,
MIB_WAN_IP_ADDR,
MIB_WAN_SUBNET_MASK,
MIB_WAN_DEFAULT_GATEWAY,
MIB_WAN_DHCP,
MIB_WAN_DNS_MODE,
MIB_WAN_DNS1,
MIB_WAN_DNS2,
MIB_WAN_DNS3,
MIB_PPP_USER,
MIB_PPP_PASSWORD,
MIB_PPP_IDLE_TIME,
MIB_PPP_CONNECT_TYPE,
MIB_PORTFW_ENABLED,
MIB_PORTFW_NUM,
MIB_PORTFW,
MIB_PORTFW_ADD,
MIB_PORTFW_DEL,
MIB_PORTFW_DELALL,

MIB_IPFILTER_ENABLED,
MIB_IPFILTER_NUM,
MIB_IPFILTER,
MIB_IPFILTER_ADD,
MIB_IPFILTER_DEL,
MIB_IPFILTER_DELALL,

MIB_MACFILTER_ENABLED,

#endif
MIB_MACFILTER_NUM,
#ifdef HOME_GATEWAY

MIB_MACFILTER,
MIB_MACFILTER_ADD,
MIB_MACFILTER_DEL,
MIB_MACFILTER_DELALL,

MIB_PORTFILTER_ENABLED,
MIB_PORTFILTER_NUM,
MIB_PORTFILTER,
MIB_PORTFILTER_ADD,
MIB_PORTFILTER_DEL,
MIB_PORTFILTER_DELALL,

MIB_TRIGGERPORT_ENABLED,
MIB_TRIGGERPORT_NUM,
MIB_TRIGGERPORT,
MIB_TRIGGERPORT_ADD,
MIB_TRIGGERPORT_DEL,
MIB_TRIGGERPORT_DELALL,

MIB_DMZ_ENABLED,

MIB_WAN1_QOS_NUM,
MIB_WAN1_QOS,
MIB_WAN1_QOS_ADD,
MIB_WAN1_QOS_DEL,
MIB_WAN1_QOS_DELALL,

MIB_WAN1_QOS_UP,
MIB_WAN1_QOS_DOWN,
MIB_WAN1_QOS_EDIT,
MIB_WAN1_QOS_ENABLED,
MIB_POLICY_SEND,


#endif
// IP MIB id
MIB_IP_ADDR,
MIB_SUBNET_MASK,
MIB_DEFAULT_GATEWAY,
MIB_DHCP,
MIB_STP_ENABLED,

MIB_WLAN_DTIM_PERIOD,
MIB_WLAN_NETWORK_TYPE,
//----------------------------------------------------------------------------------
MIB_DHCPGATEWAYIP_ADDR,
MIB_DHCPNAMESERVER_ADDR,
MIB_DOMAIN_NAME,
MIB_LAN_LEASETIME,

// Lance 2003.11.14
MIB_WLAN_WDS_NUM,
MIB_WLAN_WDS,
MIB_WLAN_WDS_ADD,
MIB_WLAN_WDS_DEL,
MIB_WLAN_WDS_DELALL,

//-----------------------------------------------------------------------------------

// Hardware setting MIB
MIB_HW_BOARD_VER,
MIB_HW_NIC0_ADDR,
MIB_HW_NIC1_ADDR,
MIB_HW_WLAN_ADDR,
MIB_HW_INIC_ADDR,
MIB_HW_REG_DOMAIN,
#ifdef _TX_POWER_CONTROL_
MIB_HW_TXPOWER_SW,
#else
MIB_HW_RF_TYPE,
#endif
MIB_HW_TX_POWER_CCK,
MIB_HW_TX_POWER_OFDM,
MIB_HW_ANT_DIVERSITY,
MIB_HW_TX_ANT,
#ifdef _TX_POWER_CONTROL_
MIB_HW_TX_DELTAR0,
MIB_HW_TX_DELTAR1,
MIB_HW_TX_DELTAR2,
MIB_TX_POWER,
#else
MIB_HW_CCA_MODE,
MIB_HW_LED_TYPE,
MIB_HW_INIT_GAIN,
#endif
#if defined(_AUTOWPA_KEY_)
MIB_HW_AUTOWPA_KEY,
MIB_HW_AUTOWPA_NUMBER,
#endif
#if defined(_SITECOM_AUTO_FW_UPGRADE_)
MIB_HW_SC_ACTIVATION_GUI,
MIB_HW_SC_FEATURE,
MIB_HW_SC_FEATURE_ENABLE,
MIB_HW_SC_NOT_AFTER_EPOCH,
MIB_HW_SC_SECRET_KEY,
MIB_HW_SC_MAC,
#endif

MIB_HW_MODEL_NAME,
MIB_HW_COUNTRY_REG,
MIB_HW_COUNTRY_REG_ABAND,
MIB_HW_COUNTRY_CODE,
MIB_HW_PINCODE,
//-------------------------------------Time Zone--------------------------------------------------
MIB_TIME_ZONE_SEL,
MIB_START_MONTH,
MIB_START_DAY,
#ifdef _ADD_WLSCH_HOUR_
MIB_START_HOUR,
MIB_END_HOUR,
#endif
MIB_END_MONTH,
MIB_END_DAY,
MIB_TIMESERVER_ADDR,
MIB_DAYLIGHT_ENABLE,
#ifdef _AUTO_DAYLIGHT_ENABLE_
MIB_AUTO_DAYLIGHT_ENABLE,
#endif 
//---------------------------------Remote Management Host Address------------------------------
MIB_REMANHOST_ADDR,
MIB_REMANG_ENABLE,
MIB_DYNIP_HOSTNAME,

MIB_PPTPIP_ADDR,
MIB_PPTPIPMAKE_ADDR,
MIB_PPTPDFGATEWAY,
MIB_PPTPGATEWAY,
MIB_PPTP_USER,
MIB_PPTP_PASSWORD,
MIB_PPTP_IDLE_TIME,
MIB_PPP_SERVNAME,
MIB_PPP_MTU,
MIB_NAT_ENABLE,
MIB_FAST_NAT_ENABLE,
MIB_FIREWALL_ENABLE,
MIB_UPNP_ENABLE,
MIB_VSER_ENABLED,
MIB_VSER_NUM,
MIB_VSER,
MIB_VSER_DEL,
MIB_VSER_DELALL,
MIB_VSER_ADD,
MIB_WAN_MODE,
MIB_DMZ_NUM,
MIB_DMZ,
MIB_DMZ_ADD,
MIB_DMZ_DEL,
MIB_DMZ_DELALL,
MIB_POD_ENABLED,
MIB_PING_ENABLED,
MIB_URLB_ENABLED,
MIB_URLB_NUM,
MIB_URLB,
MIB_URLB_ADD,
MIB_URLB_DEL,
MIB_URLB_DELALL,
MIB_ACPC_ENABLED,
MIB_ACPC_NUM,
MIB_ACPC,
MIB_ACPC_ADD,
MIB_ACPC_DEL,
MIB_ACPC_DELALL,
MIB_TELBPIP_ADDR,
MIB_TELBP_USER,
MIB_TELBP_PASSWORD,
MIB_TELBP_ENABLED,
MIB_PPTP_IPMODE,
MIB_DDNS_NAME,
MIB_DDNS_ACCOUNT,
MIB_DDNS_PASS,
MIB_DDNS_ENABLE,
MIB_DDNS_PVIDSEL,
MIB_REMAN_PORT,
MIB_PPTP_CONNECT_TYPE,
MIB_L2TP_IPMODE,
MIB_L2TP_IP_ADDR,
MIB_L2TP_MAKEADDR,
MIB_L2TP_DEFGATEWAY,
MIB_L2TP_GATEWAY,
MIB_L2TP_USER,
MIB_L2TP_PASSWORD,
MIB_L2TP_IDLE_TIME,
MIB_L2TP_CONNECT_TYPE,
MIB_PPTP_CONNT_ID,
MIB_PPTP_BEZEQ_ENABLE,
MIB_APP_LAYER_GATEWAY,
MIB_SCAN_ENABLED,
MIB_SYN_ENABLED,
MIB_DHIS_HOSTID,
MIB_DHIS_ISADDR,
MIB_DHIS_PASSWORD,
MIB_DHIS_AUTH_P1,
MIB_DHIS_AUTH_P2,
MIB_DHIS_AUTH_Q1,
MIB_DHIS_AUTH_Q2,
MIB_DHIS_SELECT,
MIB_WLAN_ENABLE_MAC_AUTH,
MIB_WLAN_RS_RETRY,
MIB_WLAN_RS_INTERVAL_TIME,
MIB_WLAN_ACCOUNT_RS_ENABLED,
MIB_WLAN_ACCOUNT_RS_IP,
MIB_WLAN_ACCOUNT_RS_PORT,
MIB_WLAN_ACCOUNT_RS_PASSWORD,
MIB_WLAN_ACCOUNT_UPDATE_ENABLED,
MIB_WLAN_ACCOUNT_UPDATE_DELAY,
MIB_WLAN_ACCOUNT_RS_RETRY,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME,
MIB_WLAN_IAPP_DISABLED,
MIB_AP_MODE,
MIB_WL_LINKMAC1,
MIB_WL_LINKMAC2,
MIB_WL_LINKMAC3,
MIB_WL_LINKMAC4,
MIB_WL_LINKMAC5,
MIB_WL_LINKMAC6,
MIB_SECURITY_MODE,
MIB_CLIENT_IP_DISABLED,
MIB_SROUT_ENABLED,
MIB_SROUT_NUM,
MIB_SROUT,
MIB_SROUT_ADD,
MIB_SROUT_DEL,
MIB_SROUT_DELALL,
#ifndef HOME_GATEWAY	// Radius server
MIB_RSER_ENABLED,
MIB_RSER_CLT_NUM,
MIB_RSER_CLT,
MIB_RSER_CLT_ADD,
MIB_RSER_CLT_DEL,
MIB_RSER_CLT_DELALL,
MIB_RSER_USR_NUM,
MIB_RSER_USR,
MIB_RSER_USR_ADD,
MIB_RSER_USR_DEL,
MIB_RSER_USR_DELALL,
#endif
MIB_1X_MODE,
MIB_POD_PACK,
MIB_POD_TIME,
MIB_POD_BUR,
MIB_SYN_PACK,
MIB_SYN_TIME,
MIB_SYN_BUR,
MIB_SCAN_NUM,
MIB_PPTP_MTU,
MIB_L2TP_MTU,
MIB_WLAN_SET_TX,
MIB_WLAN_WDS_ENABLED,
MIB_WLAN_WDS_ENCRYPT,
MIB_WLAN_WDS_WPA_AUTH,
MIB_WLAN_WDS_WPA_CIPHER_SUITE,
MIB_WLAN_WDS_WPA2_CIPHER_SUITE,
MIB_WLAN_WDS_WPA_PSK,
MIB_WLAN_WDS_WPA_PSK_FORMAT,
MIB_WLAN_TRAN_RATE,
MIB_WLAN_RATE_MODE,
MIB_WLAN_CTS,
MIB_WLAN_BURST,
MIB_DMZ_EDIT,
MIB_PS_ENABLE,	// Lance 2004.2.9
MIB_PS_NAME,	// Lance 2004.2.10
MIB_PS_IPPENABLE, // Lance 2004.2.16
MIB_PS_LPRENABLE, // Lance 2004.2.16
MIB_PS_PORT1NAME, // Lance 2004.2.16
MIB_PS_PORT2NAME, // Lance 2004.2.16
MIB_LICENCE,
MIB_MACDENY_ENABLED,
MIB_IPDENY_ENABLED,
MIB_WLAN_BLOCK_RELAY,
MIB_STA_SEC_MODE,
MIB_STA_ENCRYPT,
MIB_STA_AUTH_TYPE,
MIB_STA_WPA_CIPHER_SUITE,
MIB_STA_WEP,
MIB_STA_WEP64_KEY1,
MIB_STA_WEP64_KEY2,
MIB_STA_WEP64_KEY3,
MIB_STA_WEP64_KEY4,
MIB_STA_WEP128_KEY1,
MIB_STA_WEP128_KEY2,
MIB_STA_WEP128_KEY3,
MIB_STA_WEP128_KEY4,
MIB_STA_WEP_DEFKEY,
MIB_STA_WEP_KEY_TYPE,
MIB_STA_WPA_PSK_FORMAT,
MIB_STA_WPA_PSK,
MIB_STA_WPA_AUTH,
MIB_WLAN_BSSID,
MIB_STA_SSID,
MIB_STA_ENRADIUS,
MIB_STA_EAP_TYPE,
MIB_STA_ID,
MIB_STA_PASS,
MIB_STA_PROTOCOL,
MIB_STA_EAP_ID,
MIB_STA_EAP_PASS,
MIB_STA_CLIENT_PASS,
MIB_STA_SERVER_PASS,
MIB_STA_ENCLT_CER,
MIB_STA_ENSER_CER,
MIB_CLT_CER_FILE,
MIB_SER_CER_FILE,
MIB_STA_RTS,
MIB_STA_FRAGMENT,
MIB_STA_PREAMBLE,
MIB_ADHOC_SEC_MODE,
MIB_AUTO_MAC_CLONE,
MIB_PPP_TTL_ENABLED,
MIB_WLAN_PROTECTION_DISABLED,
MIB_WLAN_NAT25_MAC_CLONE,
MIB_WLAN_BAND,
MIB_WLAN_FIX_RATE,
MIB_WLAN_WPA2_PRE_AUTH,
MIB_WLAN_WPA2_CIPHER_SUITE,
MIB_OP_MODE,
MIB_WISP_WAN_ID,
MIB_STATIC_DHCP_ENABLED,
MIB_STATIC_DHCP_NUM,
MIB_STATIC_DHCP,
MIB_STATIC_DHCP_ADD,
MIB_STATIC_DHCP_DEL,
MIB_STATIC_DHCP_DELALL,
MIB_WPS_ENABLE,
MIB_WPS_CONFIG_MODE,
MIB_WPS_PROXY_ENABLE,
MIB_WPS_INTERNAL_REG,
MIB_WPS_DISPLAY_KEY,
MIB_WPS_CONFIG_TYPE,
MIB_WPS_CONFIG_STATUS,
MIB_WPS_PING_CODE,
MIB_AP_ROUTER_SWITCH,
MIB_DDNS_STATUS,
#ifdef HOME_GATEWAY
MIB_MAX_DOWNLOAD_BANDWIDTH,
MIB_MAX_UPLOAD_BANDWIDTH,
#endif
MIB_AUTO_BRIDGE,
MIB_WIFI_TEST,
MIB_IS_RESET_DEFAULT,
#ifdef UNIVERSAL_REPEATER
MIB_REPEATER_ENABLED,
MIB_REPEATER_SSID,
#endif
MIB_IGMP_PROXY_ENABLED,
#ifdef _Customer_
MIB_TIMEZONE_SELECTED,
#endif
#ifdef _MSSID_
MIB_WLAN_SSID_1,
MIB_WLAN_SSID_2,
MIB_WLAN_SSID_3,
MIB_WLAN_SSID_4,
MIB_WLAN_SSID_5,
MIB_WLAN_SSID_6,
MIB_WLAN_SSID_7,
MIB_WLAN_WEP64_KEY1_1,
MIB_WLAN_WEP64_KEY2_1,
MIB_WLAN_WEP64_KEY3_1,
MIB_WLAN_WEP64_KEY4_1,
MIB_WLAN_WEP64_KEY1_2,
MIB_WLAN_WEP64_KEY2_2,
MIB_WLAN_WEP64_KEY3_2,
MIB_WLAN_WEP64_KEY4_2,
MIB_WLAN_WEP64_KEY1_3,
MIB_WLAN_WEP64_KEY2_3,
MIB_WLAN_WEP64_KEY3_3,
MIB_WLAN_WEP64_KEY4_3,
MIB_WLAN_WEP64_KEY1_4,
MIB_WLAN_WEP64_KEY2_4,
MIB_WLAN_WEP64_KEY3_4,
MIB_WLAN_WEP64_KEY4_4,
MIB_WLAN_WEP64_KEY1_5,
MIB_WLAN_WEP64_KEY2_5,
MIB_WLAN_WEP64_KEY3_5,
MIB_WLAN_WEP64_KEY4_5,
MIB_WLAN_WEP64_KEY1_6,
MIB_WLAN_WEP64_KEY2_6,
MIB_WLAN_WEP64_KEY3_6,
MIB_WLAN_WEP64_KEY4_6,
MIB_WLAN_WEP64_KEY1_7,
MIB_WLAN_WEP64_KEY2_7,
MIB_WLAN_WEP64_KEY3_7,
MIB_WLAN_WEP64_KEY4_7,
MIB_WLAN_WEP128_KEY1_1,
MIB_WLAN_WEP128_KEY2_1,
MIB_WLAN_WEP128_KEY3_1,
MIB_WLAN_WEP128_KEY4_1,
MIB_WLAN_WEP128_KEY1_2,
MIB_WLAN_WEP128_KEY2_2,
MIB_WLAN_WEP128_KEY3_2,
MIB_WLAN_WEP128_KEY4_2,
MIB_WLAN_WEP128_KEY1_3,
MIB_WLAN_WEP128_KEY2_3,
MIB_WLAN_WEP128_KEY3_3,
MIB_WLAN_WEP128_KEY4_3,
MIB_WLAN_WEP128_KEY1_4,
MIB_WLAN_WEP128_KEY2_4,
MIB_WLAN_WEP128_KEY3_4,
MIB_WLAN_WEP128_KEY4_4,
MIB_WLAN_WEP128_KEY1_5,
MIB_WLAN_WEP128_KEY2_5,
MIB_WLAN_WEP128_KEY3_5,
MIB_WLAN_WEP128_KEY4_5,
MIB_WLAN_WEP128_KEY1_6,
MIB_WLAN_WEP128_KEY2_6,
MIB_WLAN_WEP128_KEY3_6,
MIB_WLAN_WEP128_KEY4_6,
MIB_WLAN_WEP128_KEY1_7,
MIB_WLAN_WEP128_KEY2_7,
MIB_WLAN_WEP128_KEY3_7,
MIB_WLAN_WEP128_KEY4_7,
MIB_WLAN_WPA_PSK_1,
MIB_WLAN_WPA_PSK_2,
MIB_WLAN_WPA_PSK_3,
MIB_WLAN_WPA_PSK_4,
MIB_WLAN_WPA_PSK_5,
MIB_WLAN_WPA_PSK_6,
MIB_WLAN_WPA_PSK_7,
MIB_SECURITY_MODE_1,
MIB_SECURITY_MODE_2,
MIB_SECURITY_MODE_3,
MIB_SECURITY_MODE_4,
MIB_SECURITY_MODE_5,
MIB_SECURITY_MODE_6,
MIB_SECURITY_MODE_7,
MIB_WLAN_ENABLE_1X_1,
MIB_WLAN_ENABLE_1X_2,
MIB_WLAN_ENABLE_1X_3,
MIB_WLAN_ENABLE_1X_4,
MIB_WLAN_ENABLE_1X_5,
MIB_WLAN_ENABLE_1X_6,
MIB_WLAN_ENABLE_1X_7,
MIB_WLAN_WEP_1,
MIB_WLAN_WEP_2,
MIB_WLAN_WEP_3,
MIB_WLAN_WEP_4,
MIB_WLAN_WEP_5,
MIB_WLAN_WEP_6,
MIB_WLAN_WEP_7,
MIB_WLAN_WEP_KEY_TYPE_1,
MIB_WLAN_WEP_KEY_TYPE_2,
MIB_WLAN_WEP_KEY_TYPE_3,
MIB_WLAN_WEP_KEY_TYPE_4,
MIB_WLAN_WEP_KEY_TYPE_5,
MIB_WLAN_WEP_KEY_TYPE_6,
MIB_WLAN_WEP_KEY_TYPE_7,
MIB_WLAN_WPA_CIPHER_SUITE_1,
MIB_WLAN_WPA_CIPHER_SUITE_2,
MIB_WLAN_WPA_CIPHER_SUITE_3,
MIB_WLAN_WPA_CIPHER_SUITE_4,
MIB_WLAN_WPA_CIPHER_SUITE_5,
MIB_WLAN_WPA_CIPHER_SUITE_6,
MIB_WLAN_WPA_CIPHER_SUITE_7,
MIB_WLAN_WPA2_CIPHER_SUITE_1,
MIB_WLAN_WPA2_CIPHER_SUITE_2,
MIB_WLAN_WPA2_CIPHER_SUITE_3,
MIB_WLAN_WPA2_CIPHER_SUITE_4,
MIB_WLAN_WPA2_CIPHER_SUITE_5,
MIB_WLAN_WPA2_CIPHER_SUITE_6,
MIB_WLAN_WPA2_CIPHER_SUITE_7,
MIB_WLAN_WPA_PSK_FORMAT_1,
MIB_WLAN_WPA_PSK_FORMAT_2,
MIB_WLAN_WPA_PSK_FORMAT_3,
MIB_WLAN_WPA_PSK_FORMAT_4,
MIB_WLAN_WPA_PSK_FORMAT_5,
MIB_WLAN_WPA_PSK_FORMAT_6,
MIB_WLAN_WPA_PSK_FORMAT_7,
MIB_WLAN_WEP_DEFAULT_KEY_1,
MIB_WLAN_WEP_DEFAULT_KEY_2,
MIB_WLAN_WEP_DEFAULT_KEY_3,
MIB_WLAN_WEP_DEFAULT_KEY_4,
MIB_WLAN_WEP_DEFAULT_KEY_5,
MIB_WLAN_WEP_DEFAULT_KEY_6,
MIB_WLAN_WEP_DEFAULT_KEY_7,
MIB_WLAN_SSID_MIRROR_1,
MIB_WLAN_SSID_MIRROR_2,
MIB_WLAN_SSID_MIRROR_3,
MIB_WLAN_SSID_MIRROR_4,
MIB_WLAN_SSID_MIRROR_5,
MIB_WLAN_SSID_MIRROR_6,
MIB_WLAN_SSID_MIRROR_7,
MIB_WLAN_FIX_RATE_1,
MIB_WLAN_FIX_RATE_2,
MIB_WLAN_FIX_RATE_3,
MIB_WLAN_FIX_RATE_4,
MIB_WLAN_FIX_RATE_5,
MIB_WLAN_FIX_RATE_6,
MIB_WLAN_FIX_RATE_7,
MIB_WLAN_HIDDEN_SSID_1,
MIB_WLAN_HIDDEN_SSID_2,
MIB_WLAN_HIDDEN_SSID_3,
MIB_WLAN_HIDDEN_SSID_4,
MIB_WLAN_HIDDEN_SSID_5,
MIB_WLAN_HIDDEN_SSID_6,
MIB_WLAN_HIDDEN_SSID_7,
MIB_WLAN_WMM_1,
MIB_WLAN_WMM_2,
MIB_WLAN_WMM_3,
MIB_WLAN_WMM_4,
MIB_WLAN_WMM_5,
MIB_WLAN_WMM_6,
MIB_WLAN_WMM_7,
MIB_WLAN_ENCRYPT_1,
MIB_WLAN_ENCRYPT_2,
MIB_WLAN_ENCRYPT_3,
MIB_WLAN_ENCRYPT_4,
MIB_WLAN_ENCRYPT_5,
MIB_WLAN_ENCRYPT_6,
MIB_WLAN_ENCRYPT_7,
#if defined(_ENVLAN_)
MIB_WLAN_VLANID_1,
MIB_WLAN_VLANID_2,
MIB_WLAN_VLANID_3,
MIB_WLAN_VLANID_4,
MIB_WLAN_VLANID_5,
MIB_WLAN_VLANID_6,
MIB_WLAN_VLANID_7,
#endif
#endif
#ifdef _DALGFTP_
MIB_ALG_FTP_PORTS,
#endif

#ifdef _LAN_WAN_ACCESS_
MIB_LAN_WAN_ACCESS,
#endif

#ifdef _SREBOOT_BLINK_POWER_
MID_IS_REBOOT,
#endif

#ifdef _WATCH_DOG_
MIB_WATCH_DOG_ENABLE,
MIB_WATCH_DOG_INTERVAL,
MIB_WATCH_DOG_HOST,
#endif
#ifdef _WISP_
MIB_STADRV_TYPE,
MIB_STADRV_SSID,
MIB_STADRV_CHAN_NUM,
MIB_STADRV_BAND,
MIB_STADRV_ENCRYPT_TYPE,
MIB_STADRV_WEP_LENGTH,
MIB_STADRV_WEP_FORMAT1,
MIB_STADRV_WEP_FORMAT2,
MIB_STADRV_WEP_FORMAT3,
MIB_STADRV_WEP_FORMAT4,
MIB_STADRV_WEP_DEFAULT_KEY,
MIB_STADRV_WPA_CIPHER,
MIB_STADRV_PSK_FORMAT,
MIB_STADRV_WEPKEY1,
MIB_STADRV_WEPKEY2,
MIB_STADRV_WEPKEY3,
MIB_STADRV_WEPKEY4,
MIB_STADRV_PSKKEY,
MIB_STADRV_WANTYPE,
MIB_STADRV_HOSTNAME,
MIB_STADRV_CLONEMAC,
MIB_STADRV_IP,
MIB_STADRV_MASK,
MIB_STADRV_GATEWAY,
#endif
#ifdef _Unicorn_
MIB_QOS_MODE,
#endif
#ifdef _SDMZ_
MIB_DMZ_MODE,
MIB_DMZ_MAC_ADDR,
MIB_SUPERDMZ_REFRESHTIME,
#endif
#ifdef _LEDSWITCH_
MIB_LED_CONTROL,
#endif
#ifdef _SNTP_A_M_CTL_ //vance 2009.02.20
MIB_TIMESERVER_DOMAIN,	//for time server domain name
MIB_TIMESERVER_ENABLE, //for sntp auto/manual setting
MIB_STATIC_SYSTEM_TIME,  //static system time for manual time setting
#endif

#ifdef _DHCP_SERVER_WITH_GW_DNS_
MIB_DHCP_SERVER_GW,
MIB_DHCP_SERVER_DNS1,
MIB_DHCP_SERVER_DNS2,
#endif
#ifdef _CONVERT_IP_ADDR_
MIB_CONVERT_IP_ADDR,
#endif
#ifdef _DUALL_WAN_ACCESS_
MIB_DUALL_ACCESS_ENABLE,
MIB_DUALL_ACCESS_MODE,
#endif

#ifdef _IPV6_DSLITE_SUPPORT_
MIB_IPV6_CGN_IP,
#endif
#ifdef _IPV6_6RD_SUPPORT_
MIB_IPV6_6RD_SERVER,
MIB_IPV6_6RD_PREFIX,
#endif

#ifdef _TIMESERVER_
MIB_TIME_TYPE,
MIB_NTPS_ADDR,
MIB_SERVER_SEL,
MIB_SERVER_AUTO,
MIB_NTPS_CONFIG,
#endif

#if defined(_WLAN_AC_SWITCH_)
MIB_WLAN_AC_SWITCH,
MIB_WLAN_AC1_SWITCH,
MIB_WLAN_AC2_SWITCH,
MIB_WLAN_AC3_SWITCH,
#endif

#ifdef _IP_SWITCH_
MIB_IP_ADDR_AP,
MIB_IP_ADDR_ROUTER,
MIB_DHCP_CLIENT_AP_START,
MIB_DHCP_CLIENT_AP_END,
MIB_DHCP_CLIENT_ROUTER_START,
MIB_DHCP_CLIENT_ROUTER_END,
#endif
#if defined(_EZ_QOS_)
MIB_EZ_QOS_NUM,
MIB_EZ_QOS,
MIB_EZ_QOS_ADD,
MIB_EZ_QOS_DEL,
MIB_EZ_QOS_DELALL,
MIB_EZ_QOS_UP,
MIB_EZ_QOS_DOWN,
MIB_EZ_QOS_EDIT,
MIB_EZ_QOS_ENABLED,
MIB_EZ_QOS_MODE,
#endif

#ifdef _AP_DHCP_SPACE_
MIB_AP_DHCP,
#endif

#ifdef _DISABLE_WIRELESS_AP_
MIB_DISABLE_WIRELESS_AP,
#endif

#ifdef _IGMP_SNOOPING_ENABLED_
MIB_IGMP_SNOOP_ENABLED,
#endif
#ifdef _MCAST_RATE_SUPPORT_
MIB_MCAST_RATE_ENABLED,
MIB_MCAST_RATE,
#endif
MIB_INIC_1X_MODE,
MIB_INIC_MAC_ADDR,
MIB_INIC_SSID,
MIB_INIC_CHAN_NUM,
MIB_INIC_WEP,
MIB_INIC_WEP64_KEY1,
MIB_INIC_WEP64_KEY2,
MIB_INIC_WEP64_KEY3,
MIB_INIC_WEP64_KEY4,
MIB_INIC_WEP128_KEY1,
MIB_INIC_WEP128_KEY2,
MIB_INIC_WEP128_KEY3,
MIB_INIC_WEP128_KEY4,
MIB_INIC_WEP_KEY_TYPE,
MIB_INIC_WEP_DEFAULT_KEY,
MIB_INIC_FRAG_THRESHOLD,
MIB_INIC_SUPPORTED_RATE,
MIB_INIC_BEACON_INTERVAL,
MIB_INIC_PREAMBLE_TYPE,
MIB_INIC_BASIC_RATE,
MIB_INIC_RTS_THRESHOLD,
MIB_INIC_AUTH_TYPE,
MIB_INIC_HIDDEN_SSID,
MIB_INIC_DISABLED,
// Rex add
MIB_INIC_TX_POWER,
MIB_INIC_WMM,
//kyle
MIB_INIC_NOFORWARD,
MIB_INIC_TURBO,
MIB_INIC_N_FIX_RATE,
MIB_INIC_N_CHANNEL_WIDTH,

#ifdef WLAN_WPA
MIB_INIC_ENCRYPT,
MIB_INIC_ENABLE_SUPP_NONWPA,
MIB_INIC_SUPP_NONWPA,
MIB_INIC_WPA_AUTH,
MIB_INIC_WPA_CIPHER_SUITE,
MIB_INIC_WPA_PSK,
MIB_INIC_WPA_GROUP_REKEY_TIME,
MIB_INIC_RS_IP,
MIB_INIC_RS_PORT,
MIB_INIC_RS_PASSWORD,
MIB_INIC_ENABLE_1X,
MIB_INIC_WPA_PSK_FORMAT,
#endif   //end    WLAN_WPA

MIB_INIC_INACTIVITY_TIME,
MIB_INIC_RATE_ADAPTIVE_ENABLED,

// access control MIB id
MIB_INIC_AC_ENABLED,
MIB_INIC_AC_NUM,
MIB_INIC_AC_ADDR,
MIB_INIC_AC_ADDR_ADD,
MIB_INIC_AC_ADDR_DEL,
MIB_INIC_AC_ADDR_DELALL,


#if defined(_INIC_MULTIPLE_WLAN_ACCESS_CONTROL_)
MIB_INIC_AC2_ENABLED,
MIB_INIC_AC2_NUM,
MIB_INIC_AC2_ADDR,
MIB_INIC_AC2_ADDR_ADD,
MIB_INIC_AC2_ADDR_DEL,
MIB_INIC_AC2_ADDR_DELALL,

MIB_INIC_AC3_ENABLED,
MIB_INIC_AC3_NUM,
MIB_INIC_AC3_ADDR,
MIB_INIC_AC3_ADDR_ADD,
MIB_INIC_AC3_ADDR_DEL,
MIB_INIC_AC3_ADDR_DELALL,

MIB_INIC_AC4_ENABLED,
MIB_INIC_AC4_NUM,
MIB_INIC_AC4_ADDR,
MIB_INIC_AC4_ADDR_ADD,
MIB_INIC_AC4_ADDR_DEL,
MIB_INIC_AC4_ADDR_DELALL,
#endif
MIB_INIC_DTIM_PERIOD,
MIB_INIC_NETWORK_TYPE,

// Lance 2003.11.14
MIB_INIC_WDS_NUM,
MIB_INIC_WDS,
MIB_INIC_WDS_ADD,
MIB_INIC_WDS_DEL,
MIB_INIC_WDS_DELALL,

MIB_INIC_ENABLE_MAC_AUTH,
MIB_INIC_RS_RETRY,
MIB_INIC_RS_INTERVAL_TIME,
MIB_INIC_ACCOUNT_RS_ENABLED,
MIB_INIC_ACCOUNT_RS_IP,
MIB_INIC_ACCOUNT_RS_PORT,
MIB_INIC_ACCOUNT_RS_PASSWORD,
MIB_INIC_ACCOUNT_UPDATE_ENABLED,
MIB_INIC_ACCOUNT_UPDATE_DELAY,
MIB_INIC_ACCOUNT_RS_RETRY,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME,
MIB_INIC_IAPP_DISABLED,
MIB_INIC_AP_MODE,
MIB_INIC_WL_LINKMAC1,
MIB_INIC_WL_LINKMAC2,
MIB_INIC_WL_LINKMAC3,
MIB_INIC_WL_LINKMAC4,
MIB_INIC_WL_LINKMAC5,
MIB_INIC_WL_LINKMAC6,

MIB_INIC_SECURITY_MODE,
MIB_INIC_CLIENT_IP_DISABLED,

MIB_INIC_SET_TX,

MIB_INIC_WDS_ENABLED,

MIB_INIC_WDS_ENCRYPT,
MIB_INIC_WDS_WPA_AUTH,
MIB_INIC_WDS_WPA_CIPHER_SUITE,
MIB_INIC_WDS_WPA2_CIPHER_SUITE,
MIB_INIC_WDS_WPA_PSK,
MIB_INIC_WDS_WPA_PSK_FORMAT,

MIB_INIC_TRAN_RATE,
MIB_INIC_RATE_MODE,
MIB_INIC_CTS,
MIB_INIC_BURST,

MIB_INIC_BLOCK_RELAY,

MIB_INIC_STA_SEC_MODE,
MIB_INIC_STA_ENCRYPT,
MIB_INIC_STA_AUTH_TYPE,
MIB_INIC_STA_WPA_CIPHER_SUITE,
MIB_INIC_STA_WEP,
MIB_INIC_STA_WEP64_KEY1,
MIB_INIC_STA_WEP64_KEY2,
MIB_INIC_STA_WEP64_KEY3,
MIB_INIC_STA_WEP64_KEY4,
MIB_INIC_STA_WEP128_KEY1,
MIB_INIC_STA_WEP128_KEY2,
MIB_INIC_STA_WEP128_KEY3,
MIB_INIC_STA_WEP128_KEY4,
MIB_INIC_STA_WEP_DEFKEY,
MIB_INIC_STA_WEP_KEY_TYPE,
MIB_INIC_STA_WPA_PSK_FORMAT,
MIB_INIC_STA_WPA_PSK,
MIB_INIC_STA_WPA_AUTH,

MIB_INIC_ADHOC_SEC_MODE,
MIB_INIC_AUTO_MAC_CLONE,

MIB_INIC_PROTECTION_DISABLED,
MIB_INIC_NAT25_MAC_CLONE,
MIB_INIC_BAND,
MIB_INIC_FIX_RATE,
MIB_INIC_WPA2_PRE_AUTH,
MIB_INIC_WPA2_CIPHER_SUITE,

MIB_INIC_WISP_WAN_ID,

MIB_INIC_WPS_ENABLE,
MIB_INIC_WPS_CONFIG_MODE,
MIB_INIC_WPS_PROXY_ENABLE,
MIB_INIC_WPS_INTERNAL_REG,
MIB_INIC_WPS_DISPLAY_KEY,
MIB_INIC_WPS_CONFIG_TYPE,
MIB_INIC_WPS_CONFIG_STATUS,
MIB_INIC_WPS_PING_CODE,
MIB_INIC_AP_ROUTER_SWITCH,

#ifdef UNIVERSAL_REPEATER
MIB_INIC_REPEATER_ENABLED,
MIB_INIC_REPEATER_SSID,
#endif

#ifdef _INIC_MSSID_
MIB_INIC_SSID_1,
MIB_INIC_SSID_2,
MIB_INIC_SSID_3,
MIB_INIC_SSID_4,
MIB_INIC_SSID_5,
MIB_INIC_SSID_6,
MIB_INIC_SSID_7,
MIB_INIC_WEP64_KEY1_1,
MIB_INIC_WEP64_KEY2_1,
MIB_INIC_WEP64_KEY3_1,
MIB_INIC_WEP64_KEY4_1,
MIB_INIC_WEP64_KEY1_2,
MIB_INIC_WEP64_KEY2_2,
MIB_INIC_WEP64_KEY3_2,
MIB_INIC_WEP64_KEY4_2,
MIB_INIC_WEP64_KEY1_3,
MIB_INIC_WEP64_KEY2_3,
MIB_INIC_WEP64_KEY3_3,
MIB_INIC_WEP64_KEY4_3,
MIB_INIC_WEP64_KEY1_4,
MIB_INIC_WEP64_KEY2_4,
MIB_INIC_WEP64_KEY3_4,
MIB_INIC_WEP64_KEY4_4,
MIB_INIC_WEP64_KEY1_5,
MIB_INIC_WEP64_KEY2_5,
MIB_INIC_WEP64_KEY3_5,
MIB_INIC_WEP64_KEY4_5,
MIB_INIC_WEP64_KEY1_6,
MIB_INIC_WEP64_KEY2_6,
MIB_INIC_WEP64_KEY3_6,
MIB_INIC_WEP64_KEY4_6,
MIB_INIC_WEP64_KEY1_7,
MIB_INIC_WEP64_KEY2_7,
MIB_INIC_WEP64_KEY3_7,
MIB_INIC_WEP64_KEY4_7,
MIB_INIC_WEP128_KEY1_1,
MIB_INIC_WEP128_KEY2_1,
MIB_INIC_WEP128_KEY3_1,
MIB_INIC_WEP128_KEY4_1,
MIB_INIC_WEP128_KEY1_2,
MIB_INIC_WEP128_KEY2_2,
MIB_INIC_WEP128_KEY3_2,
MIB_INIC_WEP128_KEY4_2,
MIB_INIC_WEP128_KEY1_3,
MIB_INIC_WEP128_KEY2_3,
MIB_INIC_WEP128_KEY3_3,
MIB_INIC_WEP128_KEY4_3,
MIB_INIC_WEP128_KEY1_4,
MIB_INIC_WEP128_KEY2_4,
MIB_INIC_WEP128_KEY3_4,
MIB_INIC_WEP128_KEY4_4,
MIB_INIC_WEP128_KEY1_5,
MIB_INIC_WEP128_KEY2_5,
MIB_INIC_WEP128_KEY3_5,
MIB_INIC_WEP128_KEY4_5,
MIB_INIC_WEP128_KEY1_6,
MIB_INIC_WEP128_KEY2_6,
MIB_INIC_WEP128_KEY3_6,
MIB_INIC_WEP128_KEY4_6,
MIB_INIC_WEP128_KEY1_7,
MIB_INIC_WEP128_KEY2_7,
MIB_INIC_WEP128_KEY3_7,
MIB_INIC_WEP128_KEY4_7,
MIB_INIC_WPA_PSK_1,
MIB_INIC_WPA_PSK_2,
MIB_INIC_WPA_PSK_3,
MIB_INIC_WPA_PSK_4,
MIB_INIC_WPA_PSK_5,
MIB_INIC_WPA_PSK_6,
MIB_INIC_WPA_PSK_7,
MIB_INIC_SECURITY_MODE_1,
MIB_INIC_SECURITY_MODE_2,
MIB_INIC_SECURITY_MODE_3,
MIB_INIC_SECURITY_MODE_4,
MIB_INIC_SECURITY_MODE_5,
MIB_INIC_SECURITY_MODE_6,
MIB_INIC_SECURITY_MODE_7,
MIB_INIC_ENABLE_1X_1,
MIB_INIC_ENABLE_1X_2,
MIB_INIC_ENABLE_1X_3,
MIB_INIC_ENABLE_1X_4,
MIB_INIC_ENABLE_1X_5,
MIB_INIC_ENABLE_1X_6,
MIB_INIC_ENABLE_1X_7,
MIB_INIC_WEP_1,
MIB_INIC_WEP_2,
MIB_INIC_WEP_3,
MIB_INIC_WEP_4,
MIB_INIC_WEP_5,
MIB_INIC_WEP_6,
MIB_INIC_WEP_7,
MIB_INIC_WEP_KEY_TYPE_1,
MIB_INIC_WEP_KEY_TYPE_2,
MIB_INIC_WEP_KEY_TYPE_3,
MIB_INIC_WEP_KEY_TYPE_4,
MIB_INIC_WEP_KEY_TYPE_5,
MIB_INIC_WEP_KEY_TYPE_6,
MIB_INIC_WEP_KEY_TYPE_7,
MIB_INIC_WPA_CIPHER_SUITE_1,
MIB_INIC_WPA_CIPHER_SUITE_2,
MIB_INIC_WPA_CIPHER_SUITE_3,
MIB_INIC_WPA_CIPHER_SUITE_4,
MIB_INIC_WPA_CIPHER_SUITE_5,
MIB_INIC_WPA_CIPHER_SUITE_6,
MIB_INIC_WPA_CIPHER_SUITE_7,
MIB_INIC_WPA2_CIPHER_SUITE_1,
MIB_INIC_WPA2_CIPHER_SUITE_2,
MIB_INIC_WPA2_CIPHER_SUITE_3,
MIB_INIC_WPA2_CIPHER_SUITE_4,
MIB_INIC_WPA2_CIPHER_SUITE_5,
MIB_INIC_WPA2_CIPHER_SUITE_6,
MIB_INIC_WPA2_CIPHER_SUITE_7,
MIB_INIC_WPA_PSK_FORMAT_1,
MIB_INIC_WPA_PSK_FORMAT_2,
MIB_INIC_WPA_PSK_FORMAT_3,
MIB_INIC_WPA_PSK_FORMAT_4,
MIB_INIC_WPA_PSK_FORMAT_5,
MIB_INIC_WPA_PSK_FORMAT_6,
MIB_INIC_WPA_PSK_FORMAT_7,
MIB_INIC_WEP_DEFAULT_KEY_1,
MIB_INIC_WEP_DEFAULT_KEY_2,
MIB_INIC_WEP_DEFAULT_KEY_3,
MIB_INIC_WEP_DEFAULT_KEY_4,
MIB_INIC_WEP_DEFAULT_KEY_5,
MIB_INIC_WEP_DEFAULT_KEY_6,
MIB_INIC_WEP_DEFAULT_KEY_7,
MIB_INIC_SSID_MIRROR_1,
MIB_INIC_SSID_MIRROR_2,
MIB_INIC_SSID_MIRROR_3,
MIB_INIC_SSID_MIRROR_4,
MIB_INIC_SSID_MIRROR_5,
MIB_INIC_SSID_MIRROR_6,
MIB_INIC_SSID_MIRROR_7,
MIB_INIC_FIX_RATE_1,
MIB_INIC_FIX_RATE_2,
MIB_INIC_FIX_RATE_3,
MIB_INIC_FIX_RATE_4,
MIB_INIC_FIX_RATE_5,
MIB_INIC_FIX_RATE_6,
MIB_INIC_FIX_RATE_7,
MIB_INIC_HIDDEN_SSID_1,
MIB_INIC_HIDDEN_SSID_2,
MIB_INIC_HIDDEN_SSID_3,
MIB_INIC_HIDDEN_SSID_4,
MIB_INIC_HIDDEN_SSID_5,
MIB_INIC_HIDDEN_SSID_6,
MIB_INIC_HIDDEN_SSID_7,
MIB_INIC_WMM_1,
MIB_INIC_WMM_2,
MIB_INIC_WMM_3,
MIB_INIC_WMM_4,
MIB_INIC_WMM_5,
MIB_INIC_WMM_6,
MIB_INIC_WMM_7,
MIB_INIC_ENCRYPT_1,
MIB_INIC_ENCRYPT_2,
MIB_INIC_ENCRYPT_3,
MIB_INIC_ENCRYPT_4,
MIB_INIC_ENCRYPT_5,
MIB_INIC_ENCRYPT_6,
MIB_INIC_ENCRYPT_7,
#if defined(_INIC_ENVLAN_)
MIB_INIC_VLANID_1,
MIB_INIC_VLANID_2,
MIB_INIC_VLANID_3,
MIB_INIC_VLANID_4,
MIB_INIC_VLANID_5,
MIB_INIC_VLANID_6,
MIB_INIC_VLANID_7,
#endif
#endif

#ifdef _MCAST_RATE_SUPPORT_
MIB_INIC_MCAST_RATE,
#endif
MIB_INIC_DFS,
MIB_INIC_BF,

MIB_TABLE_END = APMIB_MIB_END,

#ifdef _IQv2_
MIB_WIZ_MODE,
MIB_IQSET_DISABLE,
MIB_WEPASCII_STRING,
MIB_WEPASCII_STRING_5G,
#endif

#ifdef _DHCP_SWITCH_
MIB_DHCP_SWITCH,
MIB_DHCP_SWITCH_5G,
MIB_IP_ADDR_5G,
MIB_SUBNET_MASK_5G,
MIB_DEFAULT_GATEWAY_5G,
#endif


#ifdef _WANTTL_
MIB_TTL_TYPE,
MIB_TTL_VALUE,
#endif

#ifdef _INDEPEND_MTU_
MIB_INDEPEND_MTU,
#endif

#ifdef _DNS_PROXY_
MIB_DNS_PROXY_ENABLE,
MIB_DNS_PROXY_URL,
#endif

#ifdef _EDIT_DNSPROXYURL_   //EDX patrick add 
MIB_PROXYURL_CUSTOM_ENABLED,
MIB_PROXYURL_NUM,
MIB_PROXYURL_TBL,
MIB_PROXYURL_ADD,
MIB_PROXYURL_DEL,
MIB_PROXYURL_DELALL,
#endif



#ifdef _MSSID_NOFORWARD_ 
MIB_WLAN_NOFORWARD1,
MIB_WLAN_NOFORWARD2,
MIB_WLAN_NOFORWARD3,
MIB_WLAN_NOFORWARD4,
MIB_WLAN_NOFORWARD5,
MIB_WLAN_NOFORWARD6,
MIB_WLAN_NOFORWARD7,
#endif
#ifdef _INICMSSID_NOFORWARD_ 
MIB_INIC_NOFORWARD1,
MIB_INIC_NOFORWARD2,
MIB_INIC_NOFORWARD3,
MIB_INIC_NOFORWARD4,
MIB_INIC_NOFORWARD5,
MIB_INIC_NOFORWARD6,
MIB_INIC_NOFORWARD7,
#endif

#ifdef _MULTIPLE_WLAN_RS_SETTING_   //EDX patrick add
MIB_WLAN_RS_IP_1,
MIB_WLAN_RS_IP_2, 
MIB_WLAN_RS_IP_3,
MIB_WLAN_RS_IP_4,
MIB_WLAN_RS_IP_5, 
MIB_WLAN_RS_IP_6, 
MIB_WLAN_RS_IP_7,
MIB_WLAN_RS_PORT_1,
MIB_WLAN_RS_PORT_2, 
MIB_WLAN_RS_PORT_3,
MIB_WLAN_RS_PORT_4,
MIB_WLAN_RS_PORT_5,
MIB_WLAN_RS_PORT_6,
MIB_WLAN_RS_PORT_7, 
MIB_WLAN_RS_PASSWORD_1, 
MIB_WLAN_RS_PASSWORD_2,
MIB_WLAN_RS_PASSWORD_3, 
MIB_WLAN_RS_PASSWORD_4, 
MIB_WLAN_RS_PASSWORD_5, 
MIB_WLAN_RS_PASSWORD_6,
MIB_WLAN_RS_PASSWORD_7, 
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_1,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_2,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_3,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_4,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_5,
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_6, 
MIB_WLAN_ACCOUNT_RS_INTERVAL_TIME_7, 
MIB_WLAN_RS_INTERVAL_TIME_1, 
MIB_WLAN_RS_INTERVAL_TIME_2,
MIB_WLAN_RS_INTERVAL_TIME_3,
MIB_WLAN_RS_INTERVAL_TIME_4, 
MIB_WLAN_RS_INTERVAL_TIME_5, 
MIB_WLAN_RS_INTERVAL_TIME_6,
MIB_WLAN_RS_INTERVAL_TIME_7,
#endif

#ifdef _MULTIPLE_INIC_RS_SETTING_
MIB_INIC_RS_IP_1,
MIB_INIC_RS_IP_2,
MIB_INIC_RS_IP_3,
MIB_INIC_RS_IP_4,
MIB_INIC_RS_IP_5,
MIB_INIC_RS_IP_6,
MIB_INIC_RS_IP_7,
MIB_INIC_RS_PORT_1,
MIB_INIC_RS_PORT_2, 
MIB_INIC_RS_PORT_3,
MIB_INIC_RS_PORT_4, 
MIB_INIC_RS_PORT_5,
MIB_INIC_RS_PORT_6,
MIB_INIC_RS_PORT_7,
MIB_INIC_RS_PASSWORD_1,
MIB_INIC_RS_PASSWORD_2,
MIB_INIC_RS_PASSWORD_3, 
MIB_INIC_RS_PASSWORD_4,
MIB_INIC_RS_PASSWORD_5,
MIB_INIC_RS_PASSWORD_6,
MIB_INIC_RS_PASSWORD_7,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_1,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_2,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_3,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_4,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_5,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_6,
MIB_INIC_ACCOUNT_RS_INTERVAL_TIME_7,
MIB_INIC_RS_INTERVAL_TIME_1,
MIB_INIC_RS_INTERVAL_TIME_2,
MIB_INIC_RS_INTERVAL_TIME_3,
MIB_INIC_RS_INTERVAL_TIME_4,
MIB_INIC_RS_INTERVAL_TIME_5,
MIB_INIC_RS_INTERVAL_TIME_6,
MIB_INIC_RS_INTERVAL_TIME_7,
#endif
#if defined(_WIRELESS_SCHEDULE_V2_) //EDX, Robert Add 2015_03_31
MIB_WLAN_SCH_ENABLED,
MIB_INIC_SCH_ENABLED,
MIB_WIRE_SCH_NUM,
MIB_WIRE_SCH,
MIB_WIRE_SCH_ADD,
MIB_WIRE_SCH_DEL,
MIB_WIRE_SCH_EDIT,
MIB_WIRE_SCH_DELALL,
#endif

#if defined(_CROSSBAND_)
MIB_CROSSBAND_ENABLE,
#endif

#ifdef _DDNS_UID_BY_MAC_ //EDX, Robert Add 2015_04_09
MIB_DDNS_UID,
#endif

#ifdef _OPENVPN_ //EDX, Robert Add 2015_04_09
MIB_OPENVPN_ENABLED,
MIB_OPENVPN_USER_NUM,
MIB_OPENVPN_USER_TBL,
MIB_OPENVPN_USER_ADD,
MIB_OPENVPN_USER_EDIT,
MIB_OPENVPN_USER_DEL,
MIB_OPENVPN_USER_DELALL,

MIB_OPENVPN_ADV_SETUP,
MIB_OPENVPN_INTER_TYPE,
MIB_OPENVPN_PROTOCOL,
MIB_OPENVPN_SER_PORT,
MIB_OPENVPN_AUTH_MODE,
MIB_OPENVPN_ONLY_AUTH_USER,
MIB_OPENVPN_SUBNET,
MIB_OPENVPN_NETMASK,
MIB_OPENVPN_START_IP,
MIB_OPENVPN_END_IP,
MIB_OPENVPN_REDIRECT_TRAFFIC,
MIB_OPENVPN_PUSH_LAN,
MIB_OPENVPN_RES_DNS,
#endif

#ifdef _TEXTFILE_CONFIG_
MIB_TMPSTRING,
MIB_TMPSTRING_5G,
#endif

#ifdef _DUAL_WAN_IGMP_
MIB_DUAL_WAN_IGMP,
#endif

#ifdef _ADV_CONTROL_ //EDX patrick
MIB_ADVCONTROL_ENABLE,
#endif

#ifdef _WIFI_ROMAING_
MIB_WIFIROMAING_SID,
MIB_WIFIROMAING_SEQ,
MIB_WIFIROMAING_SEQ5,
MIB_WIFIROMAING_MASTER_BSSID,
MIB_WIFIROMAING_SNAP_INFO,
MIB_WIFIROMAING_WIRELESS_TYPE,
MIB_WIFIROMAING_CONNREFSITEBSSID,
MIB_SINGLESIGNON,
MIB_WIFIROMAING_STATUS,
MIB_SINGLESIGNON_FREEZE,
MIB_WIFIROMAING_SYS_SID,
#endif

};

#define MAX_INIC_AC_NUM	MAX_WLAN_AC_NUM

//---------------------------------------------------------------------------------------------

// MIB value and constant
#define MAX_SSID_LEN		33
#define WEP64_KEY_LEN		5
#define WEP128_KEY_LEN		13
#define WEP152_KEY_LEN		16
#define MAX_NAME_LEN		31
#define MAX_NAME		65
#define WPS_PING_LEN 9   //kyle
//#define COMMENT_LEN	17
//#define COMMENT_LEN		35 //kyle
#define COMMENT_LEN		37 //kyle
#define MAX_CHAN_NUM		14
#define MAX_CCK_CHAN_NUM	14
#define MAX_OFDM_CHAN_NUM	162

#define MAX_WDS_NUM		6

#define MAX_QOS_NUM		16

#ifdef _EZ_QOS_
#define MAX_EZQOS_NUM		8
#endif

#define MAX_QOSCON_NUM		16
// Static DHCP Lease --------------
#ifdef _SDHCP_SUP32_
#define MAX_STATIC_DHCP_NUM	32
#else
#define MAX_STATIC_DHCP_NUM	16
#endif
//---------------------------------

#ifdef _EDIT_DNSPROXYURL_  //EDX patrick add 
#define MAX_DNSPROXYURL_NUM	50
#define DN_LEN	50
#endif

#if defined(_WIRELESS_SCHEDULE_V2_) //EDX, Robert Add 2015_03_31
#define MAX_WIRE_SCH_NUM      2
#define MAX_SCHEDULE_SCALE 25 //1 byte Said 1 hour.
#endif
#ifdef _OPENVPN_ //EDX, Robert Add 2015_04_09
#define MAX_OPENVPNUSER_NUM	9
#define OPENVPNUSER_LEN	17
#endif
#ifdef WLAN_WPA
#define MAX_PSK_LEN		64
#define MAX_RS_PASS_LEN  65
#endif

#define TX_RATE_1M		0x01
#define TX_RATE_2M		0x02
#define TX_RATE_5M		0x04
#define TX_RATE_11M		0x08

#define TX_RATE_6M		0x10
#define TX_RATE_9M		0x20
#define TX_RATE_12M		0x40
#define TX_RATE_18M		0x80
#define TX_RATE_24M		0x100
#define TX_RATE_36M		0x200
#define TX_RATE_48M		0x400
#define TX_RATE_54M		0x800

#ifdef _Customer_
#define MAX_WLAN_AC_NUM			32
#elif _ACCESS_CONTROL_50_
#define MAX_WLAN_AC_NUM			50
#else
#define MAX_WLAN_AC_NUM			20
#endif


//#ifdef HOME_GATEWAY
#ifdef _Customer_
#define MAX_FILTER_NUM			32
#else
#define MAX_FILTER_NUM			20
#endif
//#endif

#define MAXFNAME			60

//#define	CLIENT_CERT_NAME 		("/cltCer.tgz")
//#define	SERVER_CERT_NAME 		("/ca.pem")

#ifdef __TARGET_BOARD__
#define BOOT_DEVICE_NAME			("/dev/mtdblock0")
//EDX shakim start
//#if _RFCHIP_ == MT7620
//#define BOOT_SEEK_START				0x15000
//#define BOOT_SEEK_LEN				0x4000
//EDX shakim end
#if (_ROMTYPE_ == 0)
#define BOOT_SEEK_START				0x1B000
#define BOOT_SEEK_LEN				0x4000

#elif (_ROMTYPE_ == 1)
#if (_RFCODE_ == 1) || (_RFCODE_ == 3)
#define BOOT_SEEK_START				0x18000
#else
#define BOOT_SEEK_START				0x15000
#endif
#define BOOT_SEEK_LEN				0x8000

#elif (_ROMTYPE_ == 2)
#define BOOT_SEEK_START				0x18000
#define BOOT_SEEK_LEN				0x8000
#else
#error other not support !!

#endif //_ROMTYPE_

#define BOOT_STRING				"UBoot Version:"

//EDX shakim start
#ifdef _ROOTFS_IN_FLASH_
#define UPG_DEVICE_NAME				("/dev/mtdblock6")
#else
#define UPG_DEVICE_NAME				("/dev/mtdblock4")
#endif
//EDX shakim end

//EDX Robert start
#define FREE_SPACE				("/dev/mtdblock7") //EDX Robert Add
#ifdef _OPENVPN_ 
#define VPN_KEY_DEF_SPACE 				0x0000
#define VPN_KEY_USER_SPACE				0x4000
#endif
//EDX Robert end

#define FLASH_DEVICE_NAME			("/dev/mtdblock3")

//#define	CLIENT_CERT_ADDR 		0x11000
//#define	SERVER_CERT_ADDR 		0x15000
//#define	CERT_MAX_ADDR 			0x4000


#define HW_SETTING_OFFSET			0		// size 0x400
#define HW_SETTING_OFFSET_IN_FILE		0

#if 0 //_ROMSIZE_ == 16
#define DEFAULT_SETTING_OFFSET			0x20000	// offset of config.bin
#define CURRENT_SETTING_OFFSET			0x20000
#define DF_SETTING_OFFSET_IN_FILE		0x20000
#else
#define DEFAULT_SETTING_OFFSET			0x10000	// offset of config.bin
#define CURRENT_SETTING_OFFSET			0x10000
#define DF_SETTING_OFFSET_IN_FILE		0x10000
#endif

#define DEFAULT_SETTING_FILE			("/etc/config.bin")
#define CODE_IMAGE_OFFSET			0x0000
#define WEB_PAGE_OFFSET				0x0000

#else //__TARGET_BOARD__
#define BOOT_DEVICE_NAME			("/dev/mtdblock0")
#if _ROMTYPE_ == 0
#define BOOT_SEEK_START				0x1B000
#else
#define BOOT_SEEK_START				0x18000
#endif
#define BOOT_SEEK_LEN				0x2000
#define BOOT_STRING				"UBoot Version:"

 //---------------------not mips---------------------
#define FLASH_DEVICE_NAME			"setting.bin"
//#define	CLIENT_CERT_ADDR 		0
//#define	SERVER_CERT_ADDR 		0x2000
//#define	CERT_MAX_ADDR 			0x4000

#define HW_SETTING_OFFSET			0
#define HW_SETTING_OFFSET_IN_FILE		0

#if 0 //_ROMSIZE_ == 16
#define DEFAULT_SETTING_OFFSET			0x20000	// offset of config.bin
#define CURRENT_SETTING_OFFSET			0x20000
#define DF_SETTING_OFFSET_IN_FILE		0x20000
#else
#define DEFAULT_SETTING_OFFSET			0x10000	// offset of config.bin
#define CURRENT_SETTING_OFFSET			0x10000
#define DF_SETTING_OFFSET_IN_FILE		0x10000
#endif

#define DEFAULT_SETTING_FILE			"config-pc.bin"

#define CURRENT_SETTING_OFFSET			0 // (HW_SETTING_LEN + DF_SETTING_LEN)
#define CODE_IMAGE_OFFSET			0
#define WEB_PAGE_OFFSET				0

#endif //__TARGET_BOARD__
 //----------end not mips--------------------------------

#define HW_SETTING_LEN				(0x400)
//#define DF_SETTING_LEN			(0x1c00)	//removed by Erwin
#define DF_SETTING_LEN				(0x8000)	//Erwin

/* Config/fw image file header */

typedef enum { HW_SETTING=1, DEFAULT_SETTING=2, CURRENT_SETTING=4 } CONFIG_DATA_T;
// update tag
#define HW_SETTING_HEADER_TAG			((char *)"HS")
// Note: DEFAULT_SETTING_HEADER_TAG & CURRENT_SETTING_HEADER_TAG value can not same.
#if defined(_BR6278AC_)
	#define DEFAULT_SETTING_HEADER_TAG		((char *)"71")
#elif defined(_Customer_)
	#ifdef _EW7478APC_
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"75")
	#elif defined(_RG11S_)
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"77")
	#else
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"DS")
	#endif
#elif defined(_EW7478AC_)
	#ifdef _EW7478WAP_
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"72")
	#elif defined(_EW7478ACR_)
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"74")
	#else
		#define DEFAULT_SETTING_HEADER_TAG		((char *)"70")
	#endif
#else
	#define DEFAULT_SETTING_HEADER_TAG		((char *)"DS")
#endif
#define CURRENT_SETTING_HEADER_TAG		((char *)"CS")
// force tag
#define HW_SETTING_HEADER_FORCE_TAG		((char *)"HF")
#define DEFAULT_SETTING_HEADER_FORCE_TAG	((char *)"DF")
#define CURRENT_SETTING_HEADER_FORCE_TAG	((char *)"CF")
// upgrade
#define HW_SETTING_HEADER_UPGRADE_TAG		((char *)"HU")
#define DEFAULT_SETTING_HEADER_UPGRADE_TAG	((char *)"DU")
#define CURRENT_SETTING_HEADER_UPGRADE_TAG	((char *)"CU")

#define TAG_LEN					2
#define HW_SETTING_VER				2// hw setting version

#ifdef _Maverick_
	#define DEFAULT_SETTING_VER		_DEFAULT_VERSION_		// default setting version
#else
	#define DEFAULT_SETTING_VER             3       // default setting version
#endif

#ifdef _ADM5120_
#define MODTAG_LEN			4
#elif _NETINDEX_FW_CHECK_
#define SWVERSION_LEN			4
#define MAGICNO_LEN			6
#define uHWVERSION_LEN			8
#define lHWVERSION_LEN			10
#else
#define MODTAG_LEN			12
#endif

#define CURRENT_SETTING_VER		DEFAULT_SETTING_VER // current setting version

#define FW_HEADER			((char *)"CSYS")



// End Lance 2003.08.06
#define SIGNATURE_LEN			4
#ifdef _NETINDEX_FW_CHECK_ //vance 2009.02.24 for NetIndex
#define VERSION_LEN			2
#endif

/* wlan driver ioctl id */
#define SIOCGIWRTLSTAINFO   		0x8B30	// get station table information
#define SIOCGIWRTLSTANUM		0x8B31	// get the number of stations in table
#define SIOCGIWRTLSCANREQ		0x8B33	// scan request
#define SIOCGIWRTLGETBSSDB		0x8B34	// get bss data base
#define SIOCGIWRTLJOINREQ		0x8B35	// join request
#define SIOCGIWRTLJOINREQSTATUS		0x8B36	// get status of join request
#define SIOCGIWRTLGETBSSINFO		0x8B37	// get currnet bss info
#define SIOCGIWRTLGETWDSINFO		0x8B38
/* 802.11n RT2860 wlan driver ioctl id*/
#define SIOCDEVPRIVATE              0x8BE0
#define SIOCIWFIRSTPRIV								  SIOCDEVPRIVATE
#define RTPRIV_IOCTL_GET_MAC_TABLE	 (SIOCIWFIRSTPRIV + 0x0F)
#define RTPRIV_IOCTL_GSITESURVEY		(SIOCIWFIRSTPRIV + 0x0D)
#define RTPRIV_IOCTL_SET			(SIOCIWFIRSTPRIV + 0x02)
#define OID_802_11_BSSID_LIST                       0x0609
#define RTPRIV_IOCTL_GSITESURVEY		(SIOCIWFIRSTPRIV + 0x0D)



//#define MAX_STA_NUM			32	// max support sta number
#define MAX_STA_NUM                   50	//increase max client number 32->50

/* flag of sta info */
#define STA_INFO_FLAG_AUTH_OPEN     	0x01
#define STA_INFO_FLAG_AUTH_WEP      	0x02
#define STA_INFO_FLAG_ASOC          	0x04
#define STA_INFO_FLAG_ASLEEP        	0x08


#ifdef WLAN_WPA
//typedef enum { ENCRYPT_DISABLED=0, ENCRYPT_WEP=1, ENCRYPT_PSK=3, ENCRYPT_ARS=4 } ENCRYPT_T;
typedef enum { ENCRYPT_DISABLED=0, ENCRYPT_WEP=1, ENCRYPT_WPA=2, ENCRYPT_WPA2=4, ENCRYPT_WPA2_MIXED=6 } ENCRYPT_T;
typedef enum { WDS_ENCRYPT_DISABLED=0, WDS_ENCRYPT_WEP64=1, WDS_ENCRYPT_WEP128=2, WDS_ENCRYPT_TKIP=3, WDS_ENCRYPT_AES=4} WDS_ENCRYPT_T;
typedef enum { SUPP_NONWPA_NONE=0,SUPP_NONWPA_WEP=1,SUPP_NONWPA_1X=2} SUPP_NONWAP_T;
typedef enum { WPA_AUTH_AUTO=1, WPA_AUTH_PSK=2 } WPA_AUTH_T;
typedef enum { WPA_CIPHER_TKIP=1, WPA_CIPHER_AES=2, WPA_CIPHER_MIXED=3 } WPA_CIPHER_T;
#endif

typedef enum { WEP_DISABLED=0, WEP64=1, WEP128=2, WEP152=3 } WEP_T;
typedef enum { KEY_ASCII=0, KEY_HEX } KEY_TYPE_T;
typedef enum { LONG_PREAMBLE=0, SHORT_PREAMBLE=1 } PREAMBLE_T;
typedef enum { DHCP_DISABLED=0, DHCP_CLIENT=1, DHCP_SERVER=2, PPPOE=3,  PPTP=4} DHCP_T;
typedef enum { GATEWAY_MODE=0, WISP_MODE=1, BRIDGE_MODE=2} OPMODE_T;
typedef enum { FCC=1, IC, ETSI, SPAIN, FRANCE, MKK } REG_DOMAIN_T;
typedef enum { AUTH_OPEN=0, AUTH_SHARED, AUTH_BOTH } AUTH_TYPE_T;
typedef enum { DNS_AUTO=0, DNS_MANUAL } DNS_TYPE_T;
typedef enum { CONTINUOUS=0, CONNECT_ON_DEMAND, MANUAL } PPP_CONNECT_TYPE_T;
typedef enum { RF_INTERSIL=1, RF_RFMD=2, RF_PHILIP=3, RF_MAXIM=4 } RF_TYPE_T;
typedef enum { LED_TX_RX=0, LED_LINK_TXRX=1, LED_LINKTXRX=2 } LED_TYPE_T;
typedef enum { AP_MODE=0, CLIENT_MODE=1, WDS_MODE=2 } WLAN_MODE_T;
typedef enum { INFRASTRUCTURE=0, ADHOC=1 } NETWORK_TYPE_T;
typedef enum { BAND_11B=1, BAND_11G=2, BAND_11BG=3, BAND_11A=4 } BAND_TYPE_T;


#ifdef HOME_GATEWAY
typedef enum { PROTO_BOTH=3, PROTO_TCP=1, PROTO_UDP=2 } PROTO_TYPE_T;
#endif

#ifndef _LITTLE_ENDIAN_
#define DWORD_SWAP(v) ( (((v&0xff)<<24)&0xff000000) | ((((v>>8)&0xff)<<16)&0xff0000) | \
			((((v>>16)&0xff)<<8)&0xff00) | (((v>>24)&0xff)&0xff) )
#define WORD_SWAP(v) ((unsigned short)(((v>>8)&0xff) | ((v<<8)&0xff00)))
#else
#define DWORD_SWAP(v) (v)
#define WORD_SWAP(v) (v)
#endif

/* scramble saved configuration data */
#define ENCODE_DATA(data,len) { \
	int i; \
	for (i=0; i<len; i++) \
		data[i] = ~ ( data[i] + 0x38); \
}

#define DECODE_DATA(data,len) { \
	int i; \
	for (i=0; i<len; i++) \
		data[i] = ~data[i] - 0x38;	\
}

/* Do checksum and verification for configuration data */
#ifndef WIN32
static inline unsigned char CHECKSUM(unsigned char *data, int len)
#else
__inline unsigned char CHECKSUM(unsigned char *data, int len)
#endif
{
	int i;
	unsigned char sum=0;

	for (i=0; i<len; i++)
		sum += data[i];

	sum = ~sum + 1;
	return sum;
}
#ifndef WIN32
static inline int CHECKSUM_OK(unsigned char *data, int len)
#else
__inline int CHECKSUM_OK(unsigned char *data, int len)
#endif
{
	int i;
	unsigned char sum=0;

	for (i=0; i<len; i++)
		sum += data[i];

	if (sum == 0)
		return 1;
	else
		return 0;
}
#define SIOCGIWRTLSTAINFO_NEW   0x8B50

/* WLAN sta info structure */
/*typedef struct wlan_sta_info {
        unsigned short  aid;
        unsigned char   addr[6];
        unsigned int   tx_packets;
        unsigned int   rx_packets;
	unsigned int	expired_time;  // 10 mini-sec
	unsigned short  flag;
        unsigned char   txOperaRates;
} WLAN_STA_INFO_T, *WLAN_STA_INFO_Tp;
*/
/* WLAN sta info structure */
/*
typedef struct wlan_sta_info {
		unsigned short  aid;
		unsigned char   addr[6];
		unsigned int   tx_packets;
		unsigned int   rx_packets;
		unsigned int   expired_time;   // 10 msec unit
		unsigned short  flag;
		unsigned char   txOperaRates;
		unsigned char   rssi;
		unsigned int   link_time;      // 1 sec unit
		unsigned int   tx_fail;
		unsigned char   resv[16];
} WLAN_STA_INFO_T, *WLAN_STA_INFO_Tp;
*/

/* 802.11n RT2860 stat info structure*/
typedef union  _MACHTTRANSMIT_SETTING {
	struct	{
	unsigned short   	MCS:7;                 // MCS
	unsigned short		BW:1;	//channel bandwidth 20MHz or 40 MHz
	unsigned short		ShortGI:1;
	unsigned short		STBC:2;	//SPACE
	unsigned short		rsv:3;
	unsigned short		MODE:2;	// Use definition MODE_xxx.
	}	field;
	unsigned short		word;
}MACHTTRANSMIT_SETTING, *PMACHTTRANSMIT_SETTING;

typedef struct _RT_802_11_MAC_ENTRY {
	unsigned char	ApIdx;
	unsigned char	Addr[6];
	unsigned char	Aid;
	unsigned char	Psm;     // 0:PWR_ACTIVE, 1:PWR_SAVE
	unsigned char	MimoPs;  // 0:MMPS_STATIC, 1:MMPS_DYNAMIC, 3:MMPS_Enabled
	char			AvgRssi0;
	char			AvgRssi1;
	char			AvgRssi2;
	unsigned int	ConnectedTime;
	MACHTTRANSMIT_SETTING	TxRate;
#if ((_RFCODE_ == 1) || (_RFCODE_ == 4)) //EDX Ray
	// #ifdef RTMP_RBUS_SUPPORT
	unsigned int	LastRxRate;
	unsigned short				StreamSnr[3];
	unsigned short				SoundingRespSnr[3];
	// #endif // RTMP_RBUS_SUPPORT //
#endif
#ifdef _WIFI_ROMAING_ 
        unsigned short  BW;
#endif
} RT_802_11_MAC_ENTRY, *PRT_802_11_MAC_ENTRY;

typedef struct _RT_802_11_MAC_TABLE {
	unsigned long	Num;
	RT_802_11_MAC_ENTRY	Entry[MAX_STA_NUM];
} WLAN_STA_INFO_T, *WLAN_STA_INFO_Tp;

typedef struct _RT_INIC_802_11_MAC_ENTRY {
	unsigned char	ApIdx;
	unsigned char	Addr[6];
	unsigned char	Aid;
	unsigned char	Psm;     // 0:PWR_ACTIVE, 1:PWR_SAVE
	unsigned char	MimoPs;  // 0:MMPS_STATIC, 1:MMPS_DYNAMIC, 3:MMPS_Enabled
	char			AvgRssi0;
	char			AvgRssi1;
	char			AvgRssi2;
	unsigned int	ConnectedTime;
	MACHTTRANSMIT_SETTING	TxRate;
//EDX Ray
#if ((_RFCODE_ == 0) || (_RFCODE_ == 2)|| (_RFCODE_ == 4))
	unsigned int	LastRxRate;
	unsigned short	StreamSnr[3];                           // BF SNR from RXWI. Units=0.25 dB. 22 dB offset removed
	unsigned short	SoundingRespSnr[3];                     // SNR from Sounding Response. Units=0.25 dB. 22 dB offset removed
#endif
#if 1 //EDX Thomas
	unsigned short	BW;
#endif
} RT_INIC_802_11_MAC_ENTRY, *PRT_INIC_802_11_MAC_ENTRY;

typedef struct _RT_INIC_802_11_MAC_TABLE {
	unsigned long	Num;
	RT_INIC_802_11_MAC_ENTRY	Entry[MAX_STA_NUM];
} INIC_STA_INFO_T, *INIC_STA_INFO_Tp;

#ifdef WIN32
#pragma pack(1)
#endif

typedef struct macfilter_entry {
	unsigned char macAddr[6];
	unsigned char comment[COMMENT_LEN];
} __PACK__ MACFILTER_T, *MACFILTER_Tp;

typedef struct URLB_entry {
	unsigned char URLBAddr[34];
} __PACK__ URLB_T, *URLB_Tp;

typedef struct edit_entry {
	char *selEntry;
	char *editEntry;
} EDIT_T, *EDIT_Tp;
typedef struct staticdhcp_entry {
	unsigned char ipAddr[4];
	unsigned char macAddr[6];
} __PACK__ SDHCP_T, *SDHCP_Tp ;
#ifdef HOME_GATEWAY
typedef struct portfw_entry {
	unsigned char ipAddr[4];
	unsigned short fromPort;
	unsigned short toPort;
	unsigned char protoType;
	unsigned char comment[COMMENT_LEN];
} __PACK__ PORTFW_T, *PORTFW_Tp;

typedef struct ipfilter_entry {	//no use
	unsigned char ipAddr[4];
	unsigned char protoType;
	unsigned char comment[COMMENT_LEN];
} __PACK__ IPFILTER_T, *IPFILTER_Tp ;

typedef struct portfilter_entry {	//no use
	unsigned short fromPort;
	unsigned short toPort;
	unsigned char protoType;
	unsigned char comment[COMMENT_LEN];
} __PACK__ PORTFILTER_T, *PORTFILTER_Tp;

typedef struct triggerport_entry {
	unsigned char  ip[4];
	unsigned short tcp_port[5][2];
	unsigned short udp_port[5][2];
	unsigned char comment[COMMENT_LEN];	// comment
	/*kyle
	unsigned short tri_fromPort;	// trigger-from port
	unsigned short tri_toPort;	// trigger-to port
	unsigned char tri_protoType;	// trigger proto type
	unsigned short  inc_fromPort[5][2];	// incomming-from port
	unsigned short inc_toPort;	// incoming-to port
	unsigned char inc_protoType;	// incoming proto type
	unsigned char comment[COMMENT_LEN];	// comment
	*/
} __PACK__ TRIGGERPORT_T, *TRIGGERPORT_Tp;

typedef struct ACPC_entry {
	unsigned int serindex;
	unsigned char sipAddr[4];
	unsigned char eipAddr[4];
	unsigned char protoType;
	unsigned char comment[COMMENT_LEN];
	unsigned short  Port[5][2];
} __PACK__ ACPC_T, *ACPC_Tp;

typedef struct dmz_entry {
	unsigned char pipAddr[4];
	unsigned char cipAddr[4];
	unsigned char type;
	unsigned char session;
} __PACK__ DMZ_T, *DMZ_Tp ;


typedef struct srout_entry {
	unsigned char ipAddr[4];	// ststic routing destination lan ip
	unsigned char maskAddr[4];	// static routing subnet mask
	unsigned char gatewayAddr[4];	// static routing default gateway
	unsigned short hopCount;	// static routing hop count
	unsigned char interface;	// static routing interface
} __PACK__ SROUT_T, *SROUT_Tp;

typedef struct   qos_entry {
	unsigned int bwidthVal;
	unsigned char bwidthType;


	unsigned int downVal;
	unsigned char downType;

	unsigned char sourType;
	unsigned char sourStIp[4];
	unsigned char sourEdIp[4];
	unsigned char sourMac[8][6];

	unsigned char destStIp[4];
	unsigned char destEdIp[4];

	unsigned short trafType;
	unsigned short sourPort[5][2];
	unsigned short destPort[5][2];
	unsigned short diffSevType;
	unsigned char protl;
	unsigned char ruleName[COMMENT_LEN];
}  __PACK__ QOS_T, *QOS_Tp;

#ifdef _EZ_QOS_
typedef struct   ezqos_entry {
	unsigned long bwidthVal;
	unsigned char StartIp[4];
	unsigned char EndIp[4];
	unsigned short trafType;
	unsigned char ruleName[COMMENT_LEN];
}  __PACK__ EZQOS_T, *EZQOS_Tp;
#endif

#endif
#ifndef HOME_GATEWAY
typedef struct rserclt_entry {
	unsigned char ipAddr[4];
	unsigned char password[17];
} __PACK__ RSER_CLT_T, *RSER_CLT_Tp;

typedef struct rserusr_entry {
	unsigned char username[33];
	unsigned char password[17];
} __PACK__ RSER_USR_T, *RSER_USR_Tp;
#endif

#ifdef WLAN_WDS
typedef MACFILTER_T WDS_T;
typedef MACFILTER_Tp WDS_Tp;
#endif

typedef struct hw_setting {
	unsigned char boardVer;	// h/w board version
	unsigned char nic0Addr[6];
	unsigned char nic1Addr[6];
	unsigned char wlanAddr[6];
	unsigned char inicAddr[6];
	unsigned char txPowerCCK[MAX_CCK_CHAN_NUM]; // CCK Tx power for each channel
	unsigned char txPowerOFDM[MAX_OFDM_CHAN_NUM]; // OFDM Tx power for each channel
	unsigned char regDomain; // regulation domain
	#ifdef _TX_POWER_CONTROL_
	unsigned char txpower_sw;
	#else
	unsigned char rfType; // RF module type
	#endif
	unsigned char antDiversity; // rx antenna diversity on/off
	unsigned char txAnt; // select tx antenna
#ifdef _TX_POWER_CONTROL_
	unsigned char hwtxdeltar0;
	unsigned char hwtxdeltar1;
	unsigned char hwtxdeltar2;
	unsigned char tx_power;
#else
	unsigned char ccaMode;	// 0, 1, 2
	unsigned char ledType; // LED type, see LED_TYPE_T for definition
	unsigned char initGain; // baseband initial gain
#endif
	unsigned char model[16]; // model name
	unsigned char countryReg; // countryReg
	unsigned char countryRegABand; // countryRegABand

#ifdef _WIFI_ROMAING_
        unsigned char countryCode[20];
#else
        unsigned char countryCode[4];
#endif
#ifdef _AUTOWPA_KEY_
	unsigned char	AutoWPAKey;
	unsigned char AutoWPANumber;
	#ifndef _TX_POWER_CONTROL_
	unsigned char Reserved[785];
	#else
	unsigned char Reserved[784];
	#endif
#else
	#ifndef _TX_POWER_CONTROL_
		#ifdef _Customer_AUTO_FW_UPGRADE_
                unsigned char SCActivationGUI[64];
                unsigned char SCFeature[64];
                unsigned char SCFeatureEnable[64];
                unsigned char SCNotAfterEpoch[64];
                unsigned char SCSecretKey[64];
                unsigned char SCMAC[32];
                unsigned char Reserved[435];
                #else
#ifdef _WIFI_ROMAING_
        unsigned char Reserved[771];
#else
        unsigned char Reserved[787];
#endif
		#endif
	#else
	unsigned char Reserved[786];
	#endif

#endif
} __PACK__ HW_SETTING_T, *HW_SETTING_Tp;

#ifdef _EDIT_DNSPROXYURL_ 
typedef struct dnsproxyrule_entry {
	unsigned char domainname[DN_LEN] __PACK__;
	unsigned char ipAddr[4] __PACK__;
} __PACK__ DNSPROXYURL_T, *DNSPROXYURL_Tp;
#endif

#if defined(_WIRELESS_SCHEDULE_V2_) //EDX, Robert Add 2015_03_31
typedef struct wiresch_entry {
    unsigned char Interface[10] __PACK__;
    unsigned char Sunday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Monday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Tuesday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Wednesday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Thursday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Friday[MAX_SCHEDULE_SCALE] __PACK__;
    unsigned char Saturday[MAX_SCHEDULE_SCALE] __PACK__;

} __PACK__ WIRESCH_T, *WIRESCH_Tp;
#endif

#ifdef _OPENVPN_ //EDX, Robert Add 2015_04_09
typedef struct openvpn_user_entry {
	unsigned char openvpnuserName[OPENVPNUSER_LEN] __PACK__;
	unsigned char openvpnuserPassword[OPENVPNUSER_LEN] __PACK__;
	unsigned char openvpnUserEnabled __PACK__;
} __PACK__ OPENVPNUSER_T, *OPENVPNUSER_Tp;
#endif
typedef struct config_setting {
//**************************************** WLAN stuffs ****************************************
	unsigned char ssid[MAX_SSID_LEN]; // SSID
	unsigned char channel;// current channel
	unsigned char elanMacAddr[6]; // Ethernet Lan MAC address
	unsigned char wlanMacAddr[6]; // WLAN MAC address

	unsigned char wep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep64Key1[WEP64_KEY_LEN];
	unsigned char wep64Key2[WEP64_KEY_LEN];
	unsigned char wep64Key3[WEP64_KEY_LEN];
	unsigned char wep64Key4[WEP64_KEY_LEN];
	unsigned char wep128Key1[WEP128_KEY_LEN];
	unsigned char wep128Key2[WEP128_KEY_LEN];
	unsigned char wep128Key3[WEP128_KEY_LEN];
	unsigned char wep128Key4[WEP128_KEY_LEN];
	unsigned char wepDefaultKey;
	unsigned char wepKeyType;

	unsigned short fragThreshold;
	unsigned short rtsThreshold;
	unsigned short supportedRates;
	unsigned short basicRates;
	unsigned short beaconInterval;
	unsigned char preambleType; // preamble type, 0 - long preamble, 1 - short preamble
	unsigned char authType; //authentication type, 0- open-system,1 - shared-key, 2 - both

	unsigned char acEnabled; // enable/disable WLAN access control
	unsigned char acNum; // WLAN access control entry number
	MACFILTER_T acAddrArray[MAX_WLAN_AC_NUM]; // WLAN access control array

	unsigned char hiddenSSID;
	unsigned char wlanDisabled; // enabled/disabled wlan interface
//	unsigned char aliasName[MAX_NAME_LEN]; // device logical name
	unsigned int inactivityTime; // wlan client inactivity time
	unsigned char rateAdaptiveEnabled; // enable/disable rate adaptive
	unsigned char apMode; // select AP mode type
	unsigned char iappDisabled; // disable IAPP
	unsigned char protectionDisabled; // disable g mode protection
	unsigned char maccloneEnabled; // enable NAT2.5 MAC Clone
	unsigned char wlanBand; // wlan band, bit0-11B, bit1-11G, bit2-11A
	unsigned short fixedTxRate; // fixed wlan tx rate, used when rate adaptive is disabled
//**************************************** LAN stuffs ****************************************
	unsigned char ipAddr[4];
	unsigned char subnetMask[4];
	unsigned char defaultGateway[4];
	unsigned char dhcp; // DHCP flag, 0 - disabled, 1 - client, 2 - server
	unsigned char stpEnabled; // Spanning tree protocol flag, 0 - disabled, 1 - enabled

	// Supervisor of web server account
	unsigned char superName[MAX_NAME_LEN]; // supervisor name
	unsigned char superPassword[MAX_NAME_LEN]; // supervisor assword

	// web server account
	unsigned char userName[MAX_NAME_LEN]; // supervisor name
	unsigned char userPassword[MAX_NAME_LEN]; // supervisor assword

	unsigned char DhcpGatewayIPAddr[4];
	unsigned char DhcpNameServerIPAddr[4];
	unsigned char DomainNames[MAX_NAME_LEN]; // Dhcp domain name
	unsigned char dhcpClientStart[4]; // DHCP client start address
	unsigned char dhcpClientEnd[4]; // DHCP client end address
	unsigned int leaseTime;

	unsigned char dtimPeriod; // DTIM period
	unsigned char networkType; // adhoc or Infrastructure
//**************************************** WDS stuffs ****************************************
	unsigned char wlLinkMac1[6]; // MAC address of WireLess PoP in used
	unsigned char wlLinkMac2[6]; // MAC address of WAN port PoMP in used
	unsigned char wlLinkMac3[6]; // MAC address of WAN port PoMP in used
	unsigned char wlLinkMac4[6]; // MAC address of WAN port PoMP in used
	unsigned char wlLinkMac5[6]; // MAC address of WAN port PoMP in used
	unsigned char wlLinkMac6[6]; // MAC address of WAN port PoMP in used

	unsigned char wdsEnabled; // wds enable/disable
	unsigned char wdsEncrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char wdsWpaAuth; // WPA authentication type (auto or psk)
	unsigned char wdsWpaCipher; // WPA unicast cipher suite
	unsigned char wdsWpa2Cipher; // WPA unicast cipher suite
	unsigned char wdsWpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wdsWpaPSKFormat; // PSK format 0 - passphrase, 1 - hex


	unsigned char secMode; // select security mode type
	unsigned char clIpDisabled; // select get IP address type 0 - use ip 1-  automatically
	unsigned short sel1xMode;	// selsect Radius type, 0-internal, 1--external
	unsigned char  wlanSetTx;

        unsigned char  wlanTranRate[5];
        unsigned char  wlanRateMode;
        unsigned char  wlanCts;
        unsigned char  wlanBurst;

//******************************wireless setting for inprocomm ******************************
	unsigned char  psEnable; // Lance 2004.2.9
	unsigned char  psIPPEnable; // Lance 2004.2.16
	unsigned char  psLPREnable; // Lance 2004.2.16
	unsigned char  psName[48]; // Lance 2004.2.10
	unsigned char  psPort1Name[48]; // Lance 2004.2.16
	unsigned char  psPort2Name[48]; // Lance 2004.2.16
	unsigned char  licence;
	unsigned char blockRelay; // block/un-block the relay between wireless client
	unsigned char autoMacClone;

	unsigned char   opMode; // lan,wan opration mode
	unsigned char   wispWanId ; // wisp WAN interface
#ifdef WLAN_WPA
	unsigned char encrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char enableSuppNonWpa; // enable/disable nonWPA client support
	unsigned char suppNonWpa; // which kind of non-wpa client is supported (wep/1x)
	unsigned char wpaAuth; // WPA authentication type (auto or psk)
	unsigned char wpaCipher; // WPA unicast cipher suite
	unsigned char wpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned int wpaGroupRekeyTime; // group key rekey time in second
	unsigned char rsIpAddr[4]; // radius server IP address
	unsigned short rsPort; // radius server port number

	unsigned char rsPassword[MAX_RS_PASS_LEN]; // radius server password

	unsigned char enable1X; // enable/disable 802.1x
	unsigned char wpaPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char accountRsEnabled; // enable/disable accounting server
	unsigned char accountRsIpAddr[4]; // accounting radius server IP address
	unsigned short accountRsPort; // accounting radius server port number
	unsigned char accountRsPassword[MAX_RS_PASS_LEN]; // accounting radius server password

	unsigned char accountRsUpdateEnabled; // enable/disable accounting server update
	unsigned short accountRsUpdateDelay; // account server update delay time in sec
	unsigned char macAuthEnabled; // mac authentication enabled/disabled
	unsigned char rsMaxRetry; // radius server max try
	unsigned short rsIntervalTime; // radius server timeout
	unsigned char accountRsMaxRetry; // accounting radius server max try
	unsigned short accountRsIntervalTime; // accounting radius server timeout
	unsigned char wpa2PreAuth; // wpa2 Preauthtication support
	unsigned char wpa2Cipher; // wpa2 Unicast cipher
#endif

#if defined(HOME_GATEWAY) || defined(_AP_WITH_TIMEZONE_)
//**************************************** System stuffs ****************************************
	unsigned short TimeZoneSel;
	unsigned short startMonth;
	unsigned short startDay;
	unsigned short endMonth;
	unsigned short endDay;
	
	#if defined(_ADD_WLSCH_HOUR_)
	unsigned short startHour;
        unsigned short endHour;
	#endif
	unsigned char  TimeServerAddr[4];//TimeServerAddr Address Setting
	unsigned char  DayLightEnable;//DayLightEnable Setting
	#if defined(_AUTO_DAYLIGHT_ENABLE_)
	unsigned char AutoDayLightEnable;//AutoDayLightEnable Setting
	#endif
#endif

#ifdef HOME_GATEWAY
	unsigned char  reManHostAddr[4];//Remote Management Host Address Setting
	unsigned short reManPort;
	unsigned char  reMangEnable;
//**************************************** WAN stuffs ****************************************
	unsigned char  wanMode;
	unsigned char wanDhcp; // DHCP flag for WAN port, 0 - disabled, 1 - DHCP client
	unsigned char wanIpAddr[4];
	unsigned char wanSubnetMask[4];
	unsigned char wanDefaultGateway[4];
	DNS_TYPE_T dnsMode;
	unsigned char dns1[4], dns2[4], dns3[4];

//**************************************** Dynamic IP stuffs ****************************************
	unsigned char wanMacAddr[6]; // MAC address of WAN port in used
	unsigned char  dynIPHostName[MAX_NAME_LEN]; // Dynamic IP Host Name

//**************************************** PPPoE stuffs ****************************************
	unsigned char pppUserName[65];
	unsigned char pppPassword[65];
	unsigned short pppIdleTime;
	unsigned char pppConnectType;
	unsigned char  pppServName[MAX_NAME_LEN];
	unsigned short pppMTU;
	unsigned char  pptpIpMode;
	unsigned char  pptpIPAddr[4];
	unsigned char  pptpIPMaskAddr[4];
	unsigned char  pptpDfGateway[4];	//Disabled
#ifdef _PPTP_FQDN_
	unsigned char  pptpGateway[MAX_NAME_LEN];
#else
	unsigned char  pptpGateway[4];
#endif
	unsigned char  pptpUserName[65];
	unsigned char  pptpPassword[65];
	unsigned short pptpIdleTime;
	unsigned char  pptpConnectType;
	unsigned char  pptpConntID[MAX_NAME_LEN];
	unsigned char  pptpBEZEQEnable;
	unsigned short pptpMTU;
	unsigned char  L2TPIpMode;
	unsigned char  L2TPIPAddr[4];
	unsigned char  L2TPMaskAddr[4];
	unsigned char  L2TPDefGateway[4];	//Disabled
	unsigned char  L2TPGateway[MAX_NAME_LEN];
	unsigned char  L2TPUserName[65];
	unsigned char  L2TPPassword[65];
	unsigned short L2TPIdleTime;
	unsigned char  L2TPConnectType;
	unsigned short L2TPMTU;

//**************************************** tel big pond stuffs ****************************************
	unsigned char  telBPIPAddr[4];
	unsigned char  telBPUserName[65];
	unsigned char  telBPPassword[65];
	unsigned char  telBPEnabled;

//**************************************** ddns stuffs ****************************************
	unsigned char  ddnsName[MAX_NAME_LEN];
	unsigned char  ddnsAccount[MAX_NAME_LEN];
	unsigned char  ddnsPass[MAX_NAME_LEN];
	unsigned char  ddnsEnable;
	unsigned char  ddnspvidSel[10];

	unsigned int  dhisHostID;
	unsigned char  dhisISAddr[MAX_NAME_LEN];
	unsigned char  dhispass[MAX_NAME_LEN];
	unsigned char  dhisAuthP1[51];
	unsigned char  dhisAuthP2[51];
	unsigned char  dhisAuthQ1[51];
	unsigned char  dhisAuthQ2[51];
	unsigned char  dhisSelect;
//**************************************** NAT stuffs ****************************************
	unsigned char portFwEnabled;
	unsigned char portFwNum; // number of port-forwarding entry existed
	PORTFW_T portFwArray[MAX_FILTER_NUM]; // port-forwarding array

	unsigned char ipFilterEnabled;
	unsigned char ipFilterNum; // number of ip-filter entry existed
	IPFILTER_T ipFilterArray[1]; // ip-filter array Erwin Modify

	unsigned char portFilterEnabled;
	unsigned char portFilterNum; // number of port-filter entry existed
	PORTFILTER_T portFilterArray[1]; // ip-filter array Erwin Modify

	unsigned char macFilterEnabled;
	unsigned char macFilterNum; // number of mac filter entry existed
	MACFILTER_T macFilterArray[MAX_FILTER_NUM]; // mac-filter array

	unsigned char triggerPortEnabled;
	unsigned char triggerPortNum; // number of trigger port entry existed
	TRIGGERPORT_T triggerPortArray[MAX_FILTER_NUM]; // trigger port array

	unsigned char sroutEnabled;	// enabled of static routing
	unsigned char sroutNum; // number of static routing
	SROUT_T sroutArray[MAX_FILTER_NUM]; // static routing array

	unsigned char QosNum[4]; // number of QoS
	unsigned char QosEnabled[4]; // Enabled of QoS
	QOS_T QosArray[2][MAX_QOS_NUM]; // QoS array

	unsigned char  upnpEnable;

	unsigned char  vserEnabled;
	unsigned char  vserNum; // number of virtual-server entry existed
	PORTFW_T vserArray[MAX_FILTER_NUM]; // virtual-server array

	unsigned char  natEnable;
	unsigned char  fastNatEnable;
	unsigned char  FirewallEnable;

	unsigned int  appLayerGateway;
//**************************************** FireWall stuffs ****************************************
	unsigned char	macDenyEnabled;
	unsigned char	ipDenyEnabled;
	unsigned char  ACPCEnabled;
	unsigned char  ACPCNum; // number of access control entry existed
	ACPC_T ACPCArray[MAX_FILTER_NUM]; // access control array

	unsigned char  URLBEnabled;
	unsigned char  URLBNum; // number of url-blocking entry existed
	URLB_T URLBArray[MAX_FILTER_NUM]; // url-blocking array

	unsigned char  podEnable;
	unsigned char  pingEnable;
	unsigned char  scanEnable;
	unsigned char  synEnable;

	unsigned short podPack;
	unsigned char podTime;
	unsigned short podBur;
	unsigned short synPack;
	unsigned char synTime;
	unsigned short synBur;
	unsigned int  scanNum;

	unsigned char dmzEnabled;
	unsigned char  DMZNum; // number of DMZ entry existed
	DMZ_T DMZArray[MAX_FILTER_NUM]; // DMZ array
	unsigned char	pppEnTtl;
#endif

#ifndef HOME_GATEWAY
//****************************** Radius Setting ******************************
	unsigned char rserEnabled;	// enabled of radius server
	unsigned char rserCltNum; // number of radius server client
	RSER_CLT_T rserCltArray[16]; // radius server array client

	unsigned char rserUsrNum; // number of radius server user
	RSER_USR_T rserUsrArray[96]; // radius server array user
//****************************** Station Setting ******************************
	unsigned char staSecMode; // select security mode type
	unsigned char adhocSecMode; // select security mode type
	unsigned char staEncrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char staAuthType; //authentication type,0- open-system,1-shared-key, 2 - both
	unsigned char staWpaCipher; // WPA unicast cipher suite
	unsigned char staWep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char sta64Key1[WEP64_KEY_LEN];
	unsigned char sta64Key2[WEP64_KEY_LEN];
	unsigned char sta64Key3[WEP64_KEY_LEN];
	unsigned char sta64Key4[WEP64_KEY_LEN];
	unsigned char sta128Key1[WEP128_KEY_LEN];
	unsigned char sta128Key2[WEP128_KEY_LEN];
	unsigned char sta128Key3[WEP128_KEY_LEN];
	unsigned char sta128Key4[WEP128_KEY_LEN];
	unsigned char staWepDefKey;
	unsigned char staKeyType;
	unsigned char staPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char staPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char staWpaAuth; // WPA authentication type (auto or psk)
	unsigned char wlanBssid[6];
	unsigned char staSsid[MAX_SSID_LEN]; // SSID of station

	unsigned char staEnRadius;
	unsigned char staEapTp;
	unsigned char staId[MAX_NAME];
	unsigned char staPass[MAX_NAME];
	unsigned char staPoto[15];
	unsigned char staEapId[MAX_NAME];
	unsigned char staEapPass[MAX_NAME];
	unsigned char staEnCltCer;
	unsigned char staCltPass[MAX_NAME];
	unsigned char staEnSerCer;
	unsigned char staSerPass[MAX_NAME];
	unsigned char cltCerFile;
	unsigned char serCerFile;
	unsigned short staRts;
	unsigned short staFrag;
	unsigned char staPream;
#endif

// Static DHCP Lease --------------
	unsigned char  SDHCPEnabled;
	unsigned char  SDHCPNum; // number of access control entry existed
	SDHCP_T SDHCPArray[MAX_STATIC_DHCP_NUM]; // access control array
//---------------------------------
//---------------------------------

// WPS (Wi-Fi protected setup)----------------------
unsigned char wpsEnable;//Kyle 2007.03.12, 1 enable ,0 disable
unsigned char wpsConfigMode;//Kyle 2007.03.12 , 3 bit  register(0x1) proxy(0x2) enrolee(0x4)
unsigned wpsInternalReg;//Kyle 2007.03.12,
unsigned wpsProxyEnable;//Kyle 2007.03.12,
unsigned wpsDisplayKey;//kyle 2007.04.15
unsigned char wpsConfigType;//kyle 2007.03.12  1=via pin  0= via push button
unsigned char wpsConfigStatus;//kyle 2007.03.121 1=configured 0=unconfigured.
unsigned char wpsPingCode[WPS_PING_LEN];//Kyle 2007.03.12 8byte ping code.

//-----------------------------------------------

#ifdef HOME_GATEWAY  // For Guarantee QoS
	unsigned int  MaxDownBandwidth;
	unsigned int  MaxUpBandwidth;
#endif


#ifdef UNIVERSAL_REPEATER
	// for wlan0 interface
	unsigned char repeaterEnabled; // universal repeater enable/disable
	unsigned char repeaterSSID[MAX_SSID_LEN];  // ssid on virtual interface

#endif
	unsigned char 	wlanTxPower; 	// 0:100%, 90=90%, 75=75%,,,
	unsigned char 	wlanWmm; 	  	// 0:Enable WMM, 1:Disable
	unsigned char 	wlanTurbo; 	// 0:Enable Turbo, 1:Disable
	unsigned char   wlanNFixRate;	// 0:auto, 1:MCS0 ,,,
	unsigned char   wlanNChanWidth;// 0: 20M, 1:20M/40M HZ

	unsigned char  apRouterSwitch;//0:ap mode, 1: router mode
	unsigned char 	wlanForward; 	  	// 0:Enable noForwarding, 1:Disable
	unsigned char 	ddnsStatus; 	  	// 0:Enable noForwarding, 1:Disable
	unsigned char  autoBridge;     // 0: Enable auto bridge, 1 disable
	unsigned char  wifiTest  ;     // 0: Disable WiFi Test,1 Enable
	unsigned char  isResetDefault;
	unsigned char igmpproxyEnabled; // igmpproxy enable/disable


#ifdef _Customer_
	unsigned char timezoneselected;
#endif


//Wise
#ifdef _MSSID_
	unsigned char ssid1[MAX_SSID_LEN]; // SSID
	unsigned char ssid2[MAX_SSID_LEN]; // SSID
	unsigned char ssid3[MAX_SSID_LEN]; // SSID
	unsigned char ssid4[MAX_SSID_LEN]; // SSID
	unsigned char ssid5[MAX_SSID_LEN]; // SSID
	unsigned char ssid6[MAX_SSID_LEN]; // SSID
	unsigned char ssid7[MAX_SSID_LEN]; // SSID
	unsigned char wep64Key11[WEP64_KEY_LEN];
	unsigned char wep64Key21[WEP64_KEY_LEN];
	unsigned char wep64Key31[WEP64_KEY_LEN];
	unsigned char wep64Key41[WEP64_KEY_LEN];
	unsigned char wep64Key12[WEP64_KEY_LEN];
	unsigned char wep64Key22[WEP64_KEY_LEN];
	unsigned char wep64Key32[WEP64_KEY_LEN];
	unsigned char wep64Key42[WEP64_KEY_LEN];
	unsigned char wep64Key13[WEP64_KEY_LEN];
	unsigned char wep64Key23[WEP64_KEY_LEN];
	unsigned char wep64Key33[WEP64_KEY_LEN];
	unsigned char wep64Key43[WEP64_KEY_LEN];
	unsigned char wep64Key14[WEP64_KEY_LEN];
	unsigned char wep64Key24[WEP64_KEY_LEN];
	unsigned char wep64Key34[WEP64_KEY_LEN];
	unsigned char wep64Key44[WEP64_KEY_LEN];
	unsigned char wep64Key15[WEP64_KEY_LEN];
	unsigned char wep64Key25[WEP64_KEY_LEN];
	unsigned char wep64Key35[WEP64_KEY_LEN];
	unsigned char wep64Key45[WEP64_KEY_LEN];
	unsigned char wep64Key16[WEP64_KEY_LEN];
	unsigned char wep64Key26[WEP64_KEY_LEN];
	unsigned char wep64Key36[WEP64_KEY_LEN];
	unsigned char wep64Key46[WEP64_KEY_LEN];
	unsigned char wep64Key17[WEP64_KEY_LEN];
	unsigned char wep64Key27[WEP64_KEY_LEN];
	unsigned char wep64Key37[WEP64_KEY_LEN];
	unsigned char wep64Key47[WEP64_KEY_LEN];
	unsigned char wep128Key11[WEP128_KEY_LEN];
	unsigned char wep128Key21[WEP128_KEY_LEN];
	unsigned char wep128Key31[WEP128_KEY_LEN];
	unsigned char wep128Key41[WEP128_KEY_LEN];
	unsigned char wep128Key12[WEP128_KEY_LEN];
	unsigned char wep128Key22[WEP128_KEY_LEN];
	unsigned char wep128Key32[WEP128_KEY_LEN];
	unsigned char wep128Key42[WEP128_KEY_LEN];
	unsigned char wep128Key13[WEP128_KEY_LEN];
	unsigned char wep128Key23[WEP128_KEY_LEN];
	unsigned char wep128Key33[WEP128_KEY_LEN];
	unsigned char wep128Key43[WEP128_KEY_LEN];
	unsigned char wep128Key14[WEP128_KEY_LEN];
	unsigned char wep128Key24[WEP128_KEY_LEN];
	unsigned char wep128Key34[WEP128_KEY_LEN];
	unsigned char wep128Key44[WEP128_KEY_LEN];
	unsigned char wep128Key15[WEP128_KEY_LEN];
	unsigned char wep128Key25[WEP128_KEY_LEN];
	unsigned char wep128Key35[WEP128_KEY_LEN];
	unsigned char wep128Key45[WEP128_KEY_LEN];
	unsigned char wep128Key16[WEP128_KEY_LEN];
	unsigned char wep128Key26[WEP128_KEY_LEN];
	unsigned char wep128Key36[WEP128_KEY_LEN];
	unsigned char wep128Key46[WEP128_KEY_LEN];
	unsigned char wep128Key17[WEP128_KEY_LEN];
	unsigned char wep128Key27[WEP128_KEY_LEN];
	unsigned char wep128Key37[WEP128_KEY_LEN];
	unsigned char wep128Key47[WEP128_KEY_LEN];
	unsigned char wpaPSK1[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK2[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK3[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK4[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK5[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK6[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char wpaPSK7[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char secMode1; // select security mode type
	unsigned char secMode2; // select security mode type
	unsigned char secMode3; // select security mode type
	unsigned char secMode4; // select security mode type
	unsigned char secMode5; // select security mode type
	unsigned char secMode6; // select security mode type
	unsigned char secMode7; // select security mode type
	unsigned char enable1X1; // enable/disable 802.1x
	unsigned char enable1X2; // enable/disable 802.1x
	unsigned char enable1X3; // enable/disable 802.1x
	unsigned char enable1X4; // enable/disable 802.1x
	unsigned char enable1X5; // enable/disable 802.1x
	unsigned char enable1X6; // enable/disable 802.1x
	unsigned char enable1X7; // enable/disable 802.1x
	unsigned short sel1xMode1;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode2;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode3;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode4;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode5;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode6;	// selsect Radius type, 0-internal, 1--external
	unsigned short sel1xMode7;	// selsect Radius type, 0-internal, 1--external
	unsigned char wep1; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep2; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep3; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep4; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep5; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep6; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wep7; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char wepKeyType1;
	unsigned char wepKeyType2;
	unsigned char wepKeyType3;
	unsigned char wepKeyType4;
	unsigned char wepKeyType5;
	unsigned char wepKeyType6;
	unsigned char wepKeyType7;
	unsigned char wpaCipher1; // WPA unicast cipher suite
	unsigned char wpaCipher2; // WPA unicast cipher suite
	unsigned char wpaCipher3; // WPA unicast cipher suite
	unsigned char wpaCipher4; // WPA unicast cipher suite
	unsigned char wpaCipher5; // WPA unicast cipher suite
	unsigned char wpaCipher6; // WPA unicast cipher suite
	unsigned char wpaCipher7; // WPA unicast cipher suite
	unsigned char wpa2Cipher1; // wpa2 Unicast cipher
	unsigned char wpa2Cipher2; // wpa2 Unicast cipher
	unsigned char wpa2Cipher3; // wpa2 Unicast cipher
	unsigned char wpa2Cipher4; // wpa2 Unicast cipher
	unsigned char wpa2Cipher5; // wpa2 Unicast cipher
	unsigned char wpa2Cipher6; // wpa2 Unicast cipher
	unsigned char wpa2Cipher7; // wpa2 Unicast cipher
	unsigned char wpaPSKFormat1; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat2; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat3; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat4; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat5; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat6; // PSK format 0 - passphrase, 1 - hex
	unsigned char wpaPSKFormat7; // PSK format 0 - passphrase, 1 - hex
	unsigned char wepDefaultKey1;
	unsigned char wepDefaultKey2;
	unsigned char wepDefaultKey3;
	unsigned char wepDefaultKey4;
	unsigned char wepDefaultKey5;
	unsigned char wepDefaultKey6;
	unsigned char wepDefaultKey7;
	unsigned char ssidMirror1;
	unsigned char ssidMirror2;
	unsigned char ssidMirror3;
	unsigned char ssidMirror4;
	unsigned char ssidMirror5;
	unsigned char ssidMirror6;
	unsigned char ssidMirror7;
	unsigned short fixedTxRate1; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate2; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate3; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate4; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate5; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate6; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short fixedTxRate7; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned char hiddenSSID1;
	unsigned char hiddenSSID2;
	unsigned char hiddenSSID3;
	unsigned char hiddenSSID4;
	unsigned char hiddenSSID5;
	unsigned char hiddenSSID6;
	unsigned char hiddenSSID7;
	unsigned char wlanWmm1; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm2; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm3; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm4; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm5; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm6; 	  	// 0:Enable WMM, 1:Disable
	unsigned char wlanWmm7; 	  	// 0:Enable WMM, 1:Disable
	unsigned char encrypt1; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt2; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt3; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt4; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt5; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt6; // encrypt type, defined as ENCRYPT_t
	unsigned char encrypt7; // encrypt type, defined as ENCRYPT_t
#if defined(_ENVLAN_)
	unsigned short vlanid1;
	unsigned short vlanid2;
	unsigned short vlanid3;
	unsigned short vlanid4;
	unsigned short vlanid5;
	unsigned short vlanid6;
	unsigned short vlanid7;
#endif
#endif
#ifdef _DALGFTP_
	unsigned short ftpPorts;
#endif

#ifdef _LAN_WAN_ACCESS_
	unsigned int  enableLanWanAccess;
#endif
#ifdef _IGMP_SNOOPING_ENABLED_
        unsigned char igmpsnoopEnable; //IGMP enabled 1:enabled  0:disabled
#endif
#ifdef _MCAST_RATE_SUPPORT_
	unsigned char McastRateEnable;
        unsigned char McastRate; // MultiCast rate support 0-15
#endif

#ifdef _SREBOOT_BLINK_POWER_
	unsigned char isReboot;
#endif

#ifdef _WATCH_DOG_
    unsigned char  watchdog_enable;
    unsigned short watchdog_interval;
    unsigned char  watchdog_host[4];
#endif

#if defined(_MULTIPLE_WLAN_ACCESS_CONTROL_ )
	unsigned char acEnabled2;
	unsigned char acEnabled3;
	unsigned char acEnabled4;
	unsigned char acNum2;
	unsigned char acNum3;
	unsigned char acNum4;
	MACFILTER_T acAddrArray2[MAX_WLAN_AC_NUM];
	MACFILTER_T acAddrArray3[MAX_WLAN_AC_NUM];
	MACFILTER_T acAddrArray4[MAX_WLAN_AC_NUM];
#endif

#if defined(_WLAN_AC_SWITCH_)
unsigned char wlanacswitch;
unsigned char wlanac1switch;
unsigned char wlanac2switch;
unsigned char wlanac3switch;
#endif

#ifdef _WISP_
	unsigned char stadrv_ssid[MAX_SSID_LEN];
	unsigned char stadrv_channel;
	unsigned char stadrv_band;
	unsigned char stadrv_encrypttype;
	unsigned char stadrv_weplength;
	unsigned char stadrv_wepformat1;
	unsigned char stadrv_wepformat2;
	unsigned char stadrv_wepformat3;
	unsigned char stadrv_wepformat4;
	unsigned char stadrv_defaultkey;
	unsigned char stadrv_wpacipher;
	unsigned char stadrv_pskformat;
	unsigned char stadrv_wepkey1[27];
	unsigned char stadrv_wepkey2[27];
	unsigned char stadrv_wepkey3[27];
	unsigned char stadrv_wepkey4[27];
	unsigned char stadrv_pskkey[65];
	unsigned char stadrv_clonemac[6];
#endif
#ifdef _Unicorn_
	unsigned char qosmode;
#endif
#ifdef _SDMZ_
	unsigned char dmzmode;
	unsigned char dmzMacAddr[6];
	unsigned short refreshtime;
#endif
#ifdef _LEDSWITCH_
   unsigned char ledContorl;
#endif

#ifdef _SNTP_A_M_CTL_ //vance 2009.02.20
	//for time server domain name
	unsigned char	 TimeServerDomain[MAX_NAME_LEN];
	//for sntp auto/manual setting
	unsigned char TimeServerEnable;
	//static system time
	#ifdef _SNTP_A_M_CTL2_
	unsigned char  StaticSystemTime[16];
	#else
	unsigned char  StaticSystemTime[13];
	#endif
#endif

#ifdef _DHCP_SERVER_WITH_GW_DNS_
	unsigned char dhcp_server_gw[4];
	unsigned char dhcp_server_dns1[4];
	unsigned char dhcp_server_dns2[4];
#endif

#ifdef _CONVERT_IP_ADDR_
	unsigned char convertipAddr[4];
#endif

#ifdef _EZ_QOS_
	unsigned char EZQosNum;
	unsigned char EZQosEnabled;
	unsigned char EZQosMode;
	EZQOS_T EZQosArray[MAX_EZQOS_NUM];
#endif

#ifdef _DUALL_WAN_ACCESS_
        unsigned char dual_access_enable;
        unsigned char dual_access_mode;
#endif

#ifdef _TIMESERVER_ // _TIME_ZONE_TYPE_
	unsigned char time_type;
	unsigned char ntps_addr[31];
	unsigned short ServerSel __PACK__;
	unsigned char ServerAuto __PACK__;
	unsigned char ntpsconfig __PACK__;
#endif
#ifdef _IPV6_DSLITE_SUPPORT_
        unsigned char IPv6CGNIP[16] __PACK__;
#endif
#ifdef _IPV6_6RD_SUPPORT_
        unsigned char IPv66rdServer[32] __PACK__;
        unsigned char IPv66rdPrefix[9] __PACK__;
#endif

#ifdef _IP_SWITCH_
	unsigned char ipAddrap[4];
	unsigned char ipAddrrouter[4];
	unsigned char dhcpClientapStart[4]; // DHCP client start address for ap
	unsigned char dhcpClientapEnd[4]; // DHCP client end address for ap
	unsigned char dhcpClientrouterStart[4]; // DHCP client start address for router
	unsigned char dhcpClientrouterEnd[4]; // DHCP client end address for router
#endif

#ifdef _AP_DHCP_SPACE_
	unsigned char ap_dhcp; // DHCP flag, 0 - disabled, 1 - client, 2 - server
#endif
#ifdef _DISABLE_WIRELESS_AP_
	unsigned char disable_wireless_ap; // 1 disabled ap , 0 enabled ap
#endif
	unsigned char iNIC_ssid[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_channel;// current channel
	unsigned char iNIC_elanMacAddr[6]; // Ethernet Lan MAC address
	unsigned char iNIC_wlanMacAddr[6]; // WLAN MAC address

	unsigned char iNIC_wep; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep64Key1[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key2[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key3[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key4[WEP64_KEY_LEN];
	unsigned char iNIC_wep128Key1[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key2[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key3[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key4[WEP128_KEY_LEN];
	unsigned char iNIC_wepDefaultKey;
	unsigned char iNIC_wepKeyType;

	unsigned short iNIC_fragThreshold;
	unsigned short iNIC_rtsThreshold;
	unsigned short iNIC_supportedRates;
	unsigned short iNIC_basicRates;
	unsigned short iNIC_beaconInterval;
	unsigned char iNIC_preambleType; // preamble type, 0 - long preamble, 1 - short preamble
	unsigned char iNIC_authType; //authentication type, 0- open-system,1 - shared-key, 2 - both

	unsigned char iNIC_acEnabled; // enable/disable WLAN access control
	unsigned char iNIC_acNum; // WLAN access control entry number
	MACFILTER_T iNIC_acAddrArray[MAX_INIC_AC_NUM]; // WLAN access control array

#if defined(_INIC_MULTIPLE_WLAN_ACCESS_CONTROL_ )
	unsigned char iNIC_acEnabled2; // enable/disable WLAN access control MSSID2
	unsigned char iNIC_acEnabled3; // enable/disable WLAN access control MSSID3
	unsigned char iNIC_acEnabled4; // enable/disable WLAN access control MSSID4

	unsigned char iNIC_acNum2; // WLAN access control entry number MSSID2
	unsigned char iNIC_acNum3; // WLAN access control entry number MSSID3
	unsigned char iNIC_acNum4; // WLAN access control entry number MSSID4


	MACFILTER_T iNIC_acAddrArray2[MAX_INIC_AC_NUM]; // WLAN access control array2 MSSID2
	MACFILTER_T iNIC_acAddrArray3[MAX_INIC_AC_NUM]; // WLAN access control array2 MSSID3
	MACFILTER_T iNIC_acAddrArray4[MAX_INIC_AC_NUM]; // WLAN access control array2 MSSID4
#endif //_INIC_MULTIPLE_WLAN_ACCESS_CONTROL_

	unsigned char iNIC_hiddenSSID;
	unsigned char iNIC_Disabled; // enabled/disabled wlan interface
	unsigned int iNIC_inactivityTime; // wlan client inactivity time
	unsigned char iNIC_rateAdaptiveEnabled; // enable/disable rate adaptive
	unsigned char iNIC_apMode; // select AP mode type
	unsigned char iNIC_iappDisabled; // disable IAPP
	unsigned char iNIC_protectionDisabled; // disable g mode protection
	unsigned char iNIC_maccloneEnabled; // enable NAT2.5 MAC Clone
	unsigned char iNIC_wlanBand; // wlan band, bit0-11B, bit1-11G, bit2-11A
	unsigned short iNIC_fixedTxRate; // fixed wlan tx rate, used when rate adaptive is disabled

	unsigned char iNIC_blockRelay; // block/un-block the relay between wireless client
	unsigned char iNIC_autoMacClone;

	unsigned char iNIC_wispWanId; // wisp WAN interface
#ifdef WLAN_WPA
	unsigned char iNIC_encrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_enableSuppNonWpa; // enable/disable nonWPA client support
	unsigned char iNIC_suppNonWpa; // which kind of non-wpa client is supported (wep/1x)
	unsigned char iNIC_wpaAuth; // WPA authentication type (auto or psk)
	unsigned char iNIC_wpaCipher; // WPA unicast cipher suite
	unsigned char iNIC_wpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned int iNIC_wpaGroupRekeyTime; // group key rekey time in second
	unsigned char iNIC_rsIpAddr[4]; // radius server IP address
	unsigned short iNIC_rsPort; // radius server port number

	unsigned char iNIC_rsPassword[MAX_RS_PASS_LEN]; // radius server password

	unsigned char iNIC_enable1X; // enable/disable 802.1x
	unsigned char iNIC_wpaPSKFormat; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_accountRsEnabled; // enable/disable accounting server
	unsigned char iNIC_accountRsIpAddr[4]; // accounting radius server IP address
	unsigned short iNIC_accountRsPort; // accounting radius server port number
	unsigned char iNIC_accountRsPassword[MAX_RS_PASS_LEN]; // accounting radius server password

	unsigned char iNIC_accountRsUpdateEnabled; // enable/disable accounting server update
	unsigned short iNIC_accountRsUpdateDelay; // account server update delay time in sec
	unsigned char iNIC_macAuthEnabled; // mac authentication enabled/disabled
	unsigned char iNIC_rsMaxRetry; // radius server max try
	unsigned short iNIC_rsIntervalTime; // radius server timeout
	unsigned char iNIC_accountRsMaxRetry; // accounting radius server max try
	unsigned short iNIC_accountRsIntervalTime; // accounting radius server timeout
	unsigned char iNIC_wpa2PreAuth; // wpa2 Preauthtication support
	unsigned char iNIC_wpa2Cipher; // wpa2 Unicast cipher
#endif

#ifdef UNIVERSAL_REPEATER
	// for wlan0 interface
	unsigned char iNIC_repeaterEnabled; // universal repeater enable/disable
	unsigned char iNIC_repeaterSSID[MAX_SSID_LEN];  // ssid on virtual interface
#endif
	unsigned char iNIC_wlanTxPower; 	// 0:100%, 90=90%, 75=75%,,,
	unsigned char iNIC_wlanWmm; 	  	// 0:Enable WMM, 1:Disable
//	unsigned char iNIC_bf;			// 0:Enable BF, 1:Disable
	unsigned char iNIC_wlanTurbo; 	// 0:Enable Turbo, 1:Disable
	unsigned char iNIC_wlanNFixRate;	// 0:auto, 1:MCS0 ,,,
	unsigned char iNIC_wlanNChanWidth;// 0: 20M, 1:20M/40M HZ

	unsigned char iNIC_apRouterSwitch;//0:ap mode, 1: router mode
	unsigned char iNIC_wlanForward; 	  	// 0:Enable noForwarding, 1:Disable
	unsigned char iNIC_ddnsStatus; 	  	// 0:Enable noForwarding, 1:Disable
	unsigned char iNIC_autoBridge;     // 0: Enable auto bridge, 1 disable
	unsigned char iNIC_wifiTest  ;     // 0: Disable WiFi Test,1 Enable
	unsigned char iNIC_isResetDefault;

	unsigned char iNIC_dtimPeriod; // DTIM period
	unsigned char iNIC_networkType; // adhoc or Infrastructure
//**************************************** WDS stuffs ****************************************
	unsigned char iNIC_wlLinkMac1[6]; // MAC address of WireLess PoP in used
	unsigned char iNIC_wlLinkMac2[6]; // MAC address of WAN port PoMP in used
	unsigned char iNIC_wlLinkMac3[6]; // MAC address of WAN port PoMP in used
	unsigned char iNIC_wlLinkMac4[6]; // MAC address of WAN port PoMP in used
	unsigned char iNIC_wlLinkMac5[6]; // MAC address of WAN port PoMP in used
	unsigned char iNIC_wlLinkMac6[6]; // MAC address of WAN port PoMP in used

	unsigned char iNIC_wdsEnabled; // wds enable/disable
	unsigned char iNIC_wdsEncrypt; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_wdsWpaAuth; // WPA authentication type (auto or psk)
	unsigned char iNIC_wdsWpaCipher; // WPA unicast cipher suite
	unsigned char iNIC_wdsWpa2Cipher; // WPA unicast cipher suite
	unsigned char iNIC_wdsWpaPSK[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wdsWpaPSKFormat; // PSK format 0 - passphrase, 1 - hex


	unsigned char iNIC_secMode; // select security mode type
	unsigned char iNIC_clIpDisabled; // select get IP address type 0 - use ip 1-  automatically
	unsigned short iNIC_sel1xMode;	// selsect Radius type, 0-internal, 1--external
	unsigned char  iNIC_wlanSetTx;

        unsigned char  iNIC_wlanTranRate[5];
        unsigned char  iNIC_wlanRateMode;
        unsigned char  iNIC_wlanCts;
        unsigned char  iNIC_wlanBurst;

	unsigned char iNIC_wpsEnable;//Kyle 2007.03.12, 1 enable ,0 disable
	unsigned char iNIC_wpsConfigMode;//Kyle 2007.03.12 , 3 bit  register(0x1) proxy(0x2) enrolee(0x4)
	unsigned iNIC_wpsInternalReg;//Kyle 2007.03.12,
	unsigned iNIC_wpsProxyEnable;//Kyle 2007.03.12,
	unsigned iNIC_wpsDisplayKey;//kyle 2007.04.15
	unsigned char iNIC_wpsConfigType;//kyle 2007.03.12  1=via pin  0= via push button
	unsigned char iNIC_wpsConfigStatus;//kyle 2007.03.121 1=configured 0=unconfigured.
	unsigned char iNIC_wpsPingCode[WPS_PING_LEN];//Kyle 2007.03.12 8byte ping code.
	unsigned char iNIC_DFSEnable;
	unsigned char iNIC_BFEnable;
#ifdef _MCAST_RATE_SUPPORT_
	unsigned char iNIC_McastRate;
#endif

//Wise
#ifdef _INIC_MSSID_
	unsigned char iNIC_ssid1[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid2[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid3[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid4[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid5[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid6[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_ssid7[MAX_SSID_LEN]; // SSID
	unsigned char iNIC_wep64Key11[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key21[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key31[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key41[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key12[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key22[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key32[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key42[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key13[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key23[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key33[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key43[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key14[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key24[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key34[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key44[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key15[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key25[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key35[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key45[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key16[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key26[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key36[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key46[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key17[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key27[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key37[WEP64_KEY_LEN];
	unsigned char iNIC_wep64Key47[WEP64_KEY_LEN];
	unsigned char iNIC_wep128Key11[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key21[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key31[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key41[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key12[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key22[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key32[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key42[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key13[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key23[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key33[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key43[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key14[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key24[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key34[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key44[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key15[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key25[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key35[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key45[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key16[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key26[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key36[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key46[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key17[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key27[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key37[WEP128_KEY_LEN];
	unsigned char iNIC_wep128Key47[WEP128_KEY_LEN];
	unsigned char iNIC_wpaPSK1[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK2[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK3[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK4[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK5[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK6[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_wpaPSK7[MAX_PSK_LEN+1]; // WPA pre-shared key
	unsigned char iNIC_secMode1; // select security mode type
	unsigned char iNIC_secMode2; // select security mode type
	unsigned char iNIC_secMode3; // select security mode type
	unsigned char iNIC_secMode4; // select security mode type
	unsigned char iNIC_secMode5; // select security mode type
	unsigned char iNIC_secMode6; // select security mode type
	unsigned char iNIC_secMode7; // select security mode type
	unsigned char iNIC_enable1X1; // enable/disable 802.1x
	unsigned char iNIC_enable1X2; // enable/disable 802.1x
	unsigned char iNIC_enable1X3; // enable/disable 802.1x
	unsigned char iNIC_enable1X4; // enable/disable 802.1x
	unsigned char iNIC_enable1X5; // enable/disable 802.1x
	unsigned char iNIC_enable1X6; // enable/disable 802.1x
	unsigned char iNIC_enable1X7; // enable/disable 802.1x
	unsigned short iNIC_sel1xMode1;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode2;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode3;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode4;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode5;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode6;	// selsect Radius type, 0-internal, 1--external
	unsigned short iNIC_sel1xMode7;	// selsect Radius type, 0-internal, 1--external
	unsigned char iNIC_wep1; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep2; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep3; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep4; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep5; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep6; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wep7; // WEP flag, 0 - disabled, 1 - 64bits, 2 128 bits
	unsigned char iNIC_wepKeyType1;
	unsigned char iNIC_wepKeyType2;
	unsigned char iNIC_wepKeyType3;
	unsigned char iNIC_wepKeyType4;
	unsigned char iNIC_wepKeyType5;
	unsigned char iNIC_wepKeyType6;
	unsigned char iNIC_wepKeyType7;
	unsigned char iNIC_wpaCipher1; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher2; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher3; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher4; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher5; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher6; // WPA unicast cipher suite
	unsigned char iNIC_wpaCipher7; // WPA unicast cipher suite
	unsigned char iNIC_wpa2Cipher1; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher2; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher3; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher4; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher5; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher6; // wpa2 Unicast cipher
	unsigned char iNIC_wpa2Cipher7; // wpa2 Unicast cipher
	unsigned char iNIC_wpaPSKFormat1; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat2; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat3; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat4; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat5; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat6; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wpaPSKFormat7; // PSK format 0 - passphrase, 1 - hex
	unsigned char iNIC_wepDefaultKey1;
	unsigned char iNIC_wepDefaultKey2;
	unsigned char iNIC_wepDefaultKey3;
	unsigned char iNIC_wepDefaultKey4;
	unsigned char iNIC_wepDefaultKey5;
	unsigned char iNIC_wepDefaultKey6;
	unsigned char iNIC_wepDefaultKey7;
	unsigned char iNIC_ssidMirror1;
	unsigned char iNIC_ssidMirror2;
	unsigned char iNIC_ssidMirror3;
	unsigned char iNIC_ssidMirror4;
	unsigned char iNIC_ssidMirror5;
	unsigned char iNIC_ssidMirror6;
	unsigned char iNIC_ssidMirror7;
	unsigned short iNIC_fixedTxRate1; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate2; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate3; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate4; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate5; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate6; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned short iNIC_fixedTxRate7; // fixed wlan tx rate, used when rate adaptive is disabled
	unsigned char iNIC_hiddenSSID1;
	unsigned char iNIC_hiddenSSID2;
	unsigned char iNIC_hiddenSSID3;
	unsigned char iNIC_hiddenSSID4;
	unsigned char iNIC_hiddenSSID5;
	unsigned char iNIC_hiddenSSID6;
	unsigned char iNIC_hiddenSSID7;
	unsigned char iNIC_wlanWmm1; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm2; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm3; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm4; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm5; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm6; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_wlanWmm7; 	  	// 0:Enable WMM, 1:Disable
	unsigned char iNIC_encrypt1; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt2; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt3; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt4; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt5; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt6; // encrypt type, defined as ENCRYPT_t
	unsigned char iNIC_encrypt7; // encrypt type, defined as ENCRYPT_t
#if defined(_INIC_ENVLAN_)
	unsigned short iNIC_vlanid1;
	unsigned short iNIC_vlanid2;
	unsigned short iNIC_vlanid3;
	unsigned short iNIC_vlanid4;
	unsigned short iNIC_vlanid5;
	unsigned short iNIC_vlanid6;
	unsigned short iNIC_vlanid7;
#endif
#endif

	OEM_STRUCTURE_T oem;

#if 0 //def _TIMESERVER_CHN_
	unsigned short ServerSel __PACK__;
	unsigned char ServerAuto __PACK__;
#endif

#ifdef _IQv2_
	unsigned char  wizMode __PACK__ ;
	unsigned char  IqDisable __PACK__ ;
	unsigned char wepasciistring[MAX_PSK_LEN+1] __PACK__;
	unsigned char wepasciistring5g[MAX_PSK_LEN+1] __PACK__;
#endif

#ifdef _DHCP_SWITCH_
	unsigned char dhcpswitch __PACK__;     
	unsigned char dhcpswitch5g __PACK__;
	unsigned char ipAddr5g[4] __PACK__;
	unsigned char subnetMask5g[4] __PACK__;
	unsigned char defaultGateway5g[4] __PACK__;
#endif

#ifdef _WANTTL_
	unsigned char ttlType;
	unsigned short ttlValue;
#endif

#ifdef _INDEPEND_MTU_
	unsigned short inMTU;
#endif

#ifdef _DNS_PROXY_
unsigned char dnsproxy_enable __PACK__;
unsigned char dnsproxyurll[MAX_URL_LEN] __PACK__;
#endif

#ifdef _EDIT_DNSPROXYURL_   //EDX patrick add 
	unsigned char proxyurlCustomEnabled __PACK__;
	unsigned char proxyurlNum __PACK__;
	DNSPROXYURL_T proxyurlArray[MAX_DNSPROXYURL_NUM] __PACK__;
#endif

#ifdef _MSSID_NOFORWARD_ 
unsigned char 	wlanForward1;
unsigned char 	wlanForward2;
unsigned char 	wlanForward3;
unsigned char 	wlanForward4;
unsigned char 	wlanForward5;
unsigned char 	wlanForward6;
unsigned char 	wlanForward7;
#endif

#ifdef _INICMSSID_NOFORWARD_ 
unsigned char 	iNICForward1;
unsigned char 	iNICForward2;
unsigned char 	iNICForward3;
unsigned char 	iNICForward4;
unsigned char 	iNICForward5;
unsigned char 	iNICForward6;
unsigned char 	iNICForward7;
#endif


#ifdef _MULTIPLE_WLAN_RS_SETTING_  //EDX patrick add
	unsigned char rsIpAddr1[4] __PACK__; // radius server IP address
	unsigned char rsIpAddr2[4] __PACK__;
	unsigned char rsIpAddr3[4] __PACK__;
	unsigned char rsIpAddr4[4] __PACK__;
	unsigned char rsIpAddr5[4] __PACK__;
	unsigned char rsIpAddr6[4] __PACK__;
	unsigned char rsIpAddr7[4] __PACK__;
	unsigned char rsIpAddr8[4] __PACK__;
	unsigned short rsPort1 __PACK__; // radius server port number
	unsigned short rsPort2 __PACK__;
	unsigned short rsPort3 __PACK__;
	unsigned short rsPort4 __PACK__;
	unsigned short rsPort5 __PACK__; 
	unsigned short rsPort6 __PACK__;
	unsigned short rsPort7 __PACK__;
	unsigned short rsPort8 __PACK__;
	unsigned char rsPassword1[MAX_RS_PASS_LEN] __PACK__; // radius server password
	unsigned char rsPassword2[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rsPassword3[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rsPassword4[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rsPassword5[MAX_RS_PASS_LEN] __PACK__; 
	unsigned char rsPassword6[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rsPassword7[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rsPassword8[MAX_RS_PASS_LEN] __PACK__;
	unsigned short rsIntervalTime1 __PACK__; // radius server timeout
	unsigned short rsIntervalTime2 __PACK__;
	unsigned short rsIntervalTime3 __PACK__;
	unsigned short rsIntervalTime4 __PACK__;
	unsigned short rsIntervalTime5 __PACK__; 
	unsigned short rsIntervalTime6 __PACK__;
	unsigned short rsIntervalTime7 __PACK__;
	unsigned short accountRsIntervalTime1 __PACK__; // accounting radius server timeout
	unsigned short accountRsIntervalTime2 __PACK__;
	unsigned short accountRsIntervalTime3 __PACK__;
	unsigned short accountRsIntervalTime4 __PACK__;
	unsigned short accountRsIntervalTime5 __PACK__;
	unsigned short accountRsIntervalTime6 __PACK__;
	unsigned short accountRsIntervalTime7 __PACK__;
#endif
#ifdef _MULTIPLE_INIC_RS_SETTING_
	unsigned char rs5GIpAddr1[4] __PACK__; // radius server IP address
	unsigned char rs5GIpAddr2[4] __PACK__;
	unsigned char rs5GIpAddr3[4] __PACK__;
	unsigned char rs5GIpAddr4[4] __PACK__;	
	unsigned char rs5GIpAddr5[4] __PACK__;
	unsigned char rs5GIpAddr6[4] __PACK__;
	unsigned char rs5GIpAddr7[4] __PACK__;
	unsigned short rs5GPort1 __PACK__; // radius server port number
	unsigned short rs5GPort2 __PACK__;
	unsigned short rs5GPort3 __PACK__;
	unsigned short rs5GPort4 __PACK__;
	unsigned short rs5GPort5 __PACK__;
	unsigned short rs5GPort6 __PACK__;
	unsigned short rs5GPort7 __PACK__;
	unsigned char rs5GPassword1[MAX_RS_PASS_LEN] __PACK__; // radius server password
	unsigned char rs5GPassword2[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rs5GPassword3[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rs5GPassword4[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rs5GPassword5[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rs5GPassword6[MAX_RS_PASS_LEN] __PACK__;
	unsigned char rs5GPassword7[MAX_RS_PASS_LEN] __PACK__;
	unsigned short rs5GIntervalTime1 __PACK__; // radius server timeout
	unsigned short rs5GIntervalTime2 __PACK__;
	unsigned short rs5GIntervalTime3 __PACK__;
	unsigned short rs5GIntervalTime4 __PACK__;
	unsigned short rs5GIntervalTime5 __PACK__;
	unsigned short rs5GIntervalTime6 __PACK__;
	unsigned short rs5GIntervalTime7 __PACK__;
	unsigned short accountRs5GIntervalTime1 __PACK__; // accounting radius server timeout
	unsigned short accountRs5GIntervalTime2 __PACK__;
	unsigned short accountRs5GIntervalTime3 __PACK__;
	unsigned short accountRs5GIntervalTime4 __PACK__;	
	unsigned short accountRs5GIntervalTime5 __PACK__;
	unsigned short accountRs5GIntervalTime6 __PACK__;
	unsigned short accountRs5GIntervalTime7 __PACK__;	
#endif
#if defined(_WIRELESS_SCHEDULE_V2_) //EDX, Robert Add 2015_03_31
	unsigned char WlanSchEnabled;
	unsigned char iNIC_SchEnabled;
	unsigned char WirelessSchNum __PACK__;
	WIRESCH_T WirelessSchArray[MAX_WIRE_SCH_NUM] __PACK__;
#endif

#if defined(_CROSSBAND_)
	unsigned char crossbandEnable;
#endif

#ifdef _DDNS_UID_BY_MAC_ //EDX, Robert Add 2015_04_09
unsigned char ddnsUid[11] __PACK__;
#endif

#ifdef _OPENVPN_ //EDX, Robert Add 2015_04_09
unsigned char openvpnEnabled __PACK__;
unsigned char openvpnUserNum __PACK__;
OPENVPNUSER_T openvpnUserArray[MAX_OPENVPNUSER_NUM] __PACK__;

unsigned char openvpnAdvSetup __PACK__;
unsigned char openvpnInterType __PACK__;
unsigned char openvpnProtocol __PACK__;
unsigned short openvpnserPort __PACK__;
unsigned char openvpnauthMode __PACK__;
unsigned char openvpnonlyAuthUser __PACK__;
unsigned char openvpnSubnet[4] __PACK__;
unsigned char openvpnNetmask[4] __PACK__;
unsigned char openvpnStartIP[4] __PACK__;
unsigned char openvpnEndIP[4] __PACK__;
unsigned char openvpnRedirectTraffic __PACK__;
unsigned char openvpnPushLAN __PACK__;
unsigned char openvpnResDNS __PACK__;
#endif

#ifdef _TEXTFILE_CONFIG_
        unsigned char tmpstring[MAX_PSK_LEN+1] __PACK__;
        unsigned char tmpstring5g[MAX_PSK_LEN+1] __PACK__;
#endif

#ifdef _DUAL_WAN_IGMP_
	unsigned char Dual_WAN_IGMP __PACK__;
#endif

#ifdef _ADV_CONTROL_ //EDX patrick
unsigned char manualavdcontrol_enable __PACK__;
#endif

#ifdef _WIFI_ROMAING_
	unsigned char wifiromaing_sid[50];
	unsigned char wifiromaing_seq;
	unsigned char wifiromaing_seq5;
	unsigned char wifiromaing_MasterBssid[6];
	unsigned char wifiromaing_snap_info[20];
	unsigned char wifiromaing_wireless_type[4];
	unsigned char wifiromaing_Connrefsitebssid[6];
	unsigned char singlesignon;
	unsigned char wifiromaing_status;
	unsigned char singlesignon_freeze;
	unsigned char wifiromaing_sys_sid[50];
#endif

#if defined(_IS_GATEWAY_)
//	unsigned char	Reserved[16828-7460-_FLASH_RESERVED_];
	unsigned char	Reserved[16187 - _FLASH_RESERVED_];
#else
//	unsigned char	Reserved[16828 -_FLASH_RESERVED_];
	unsigned char	Reserved[23646 -_FLASH_RESERVED_];
#endif

//-----------------------------------------------------------------------------------------------
} __PACK__ APMIB_T, *APMIB_Tp;

/* Config file header */
typedef struct param_header {
	unsigned char signature[SIGNATURE_LEN];  // Tag + version
	unsigned short len;
} __PACK__ PARAM_HEADER_T, *PARAM_HEADER_Tp;

/* Firmware image file header */
typedef struct img_header {
#ifdef _NETINDEX_FW_CHECK_
	unsigned char signature[SIGNATURE_LEN];
	unsigned char SWVersion[VERSION_LEN];
	unsigned char magincNo[VERSION_LEN];
	unsigned char upperHWVersion[VERSION_LEN];
	unsigned char lowerHWVersion[VERSION_LEN];
	unsigned int len;
#else
	unsigned char signature[SIGNATURE_LEN];
	#ifndef _ADM5120_
	unsigned int startAddr;
    unsigned int burnAddr;
	#endif
	unsigned char modTag[SIGNATURE_LEN];
	unsigned int len;
#endif
} __PACK__ IMG_HEADER_T, *IMG_HEADER_Tp;

/* Web page file header */
typedef IMG_HEADER_T WEB_HEADER_T;
typedef IMG_HEADER_Tp WEB_HEADER_Tp;

typedef struct _file_entry {
	char name[MAXFNAME];
	unsigned int size;
} __PACK__ FILE_ENTRY_T, *FILE_ENTRY_Tp;

#ifdef WIN32
#pragma pack()
#endif

//////////////////////////////////////////////////////////
int apmib_init(void);
int apmib_reinit(void);
char *apmib_hwconf(void);
char *apmib_csconf(void);
char *apmib_dsconf(void);
int apmib_get(int id, void *value);
//int apmib_getDef(int id, void *value);	//removed by Erwin
int apmib_set(int id, void *value);
//int apmib_setDef(int id, void *value);	//removed by Erwin
int apmib_update(CONFIG_DATA_T type);
//int apmib_updateDef(void);	//removed by Erwin
int apmib_updateFlash(CONFIG_DATA_T type, char *data, int len, int force, int ver);

//extern APMIB_Tp pMib, pMibDef;		//removed by Erwin
extern APMIB_Tp pMib;
extern HW_SETTING_Tp pHwSetting;
extern PARAM_HEADER_T hsHeader, dsHeader, csHeader;
#endif // INCLUDE_APMIB_H
extern void dump_mem(void *ptr, int size);
